{
  "language": "Solidity",
  "sources": {
    "contracts/test.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.18;\n\ncontract test {\n    address public owner;\n    uint256 public i_initialSupply;\n    uint256 public balance;\n    uint256 population;\n    mapping(uint256 => Person) people;\n\n    struct Person {\n        uint256 _id;\n        string _name;\n        uint8 _age;\n        address payable _wallet;\n    }\n\n    constructor(uint256 _inititialSupply) {\n        owner = msg.sender;\n        i_initialSupply = _inititialSupply;\n        balance = 0;\n        population = 0;\n        people[0] = Person(population, \"Ross\", 32, payable(msg.sender));\n    }\n\n    function mint() public payable {\n        balance += 1;\n    }\n\n    function newPerson(string memory _name, uint8 _age) public {\n        population++;\n        people[population] = Person(\n            population,\n            _name,\n            _age,\n            payable(msg.sender)\n        );\n    }\n\n    function getPerson(uint256 n) public view returns (Person memory) {\n        return people[n];\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}