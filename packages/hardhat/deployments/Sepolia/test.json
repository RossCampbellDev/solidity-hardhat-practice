{
  "address": "0x9867032Ab5A03aE9C70b7948ae6b46422d556342",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_inititialSupply",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_priceFeed",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "test__NotOwner",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "whoever",
          "type": "address"
        }
      ],
      "name": "SomeEvent",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "balance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "convertEthToUsd",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "n",
          "type": "uint256"
        }
      ],
      "name": "deletePerson",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "n",
          "type": "uint256"
        }
      ],
      "name": "getPerson",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "_id",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "_name",
              "type": "string"
            },
            {
              "internalType": "uint8",
              "name": "_age",
              "type": "uint8"
            },
            {
              "internalType": "address payable",
              "name": "_wallet",
              "type": "address"
            }
          ],
          "internalType": "struct test.Person",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPopulation",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPriceFromConverter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRoundData",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "i_initialSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mint",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "uint8",
          "name": "_age",
          "type": "uint8"
        }
      ],
      "name": "newPerson",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "population",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "testAggregator",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x62dd20be122c3b2f00dba79e972eaf6e21ff174e4dfdf1668a67550f3c22913a",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x9867032Ab5A03aE9C70b7948ae6b46422d556342",
    "transactionIndex": 26,
    "gasUsed": "1329762",
    "logsBloom": "0x
    "blockHash": "0x18a8d2ef399013c76570110cb643e27566294601054ccef24ad979208248921b",
    "transactionHash": "0x62dd20be122c3b2f00dba79e972eaf6e21ff174e4dfdf1668a67550f3c22913a",
    "logs": [],
    "blockNumber": 3264740,
    "cumulativeGasUsed": "5145123",
    "status": 1,
    "byzantium": true
  },
  "args": [
    25,
    "0x694AA1769357215DE4FAC081bf1f309aDC325306"
  ],
  "numDeployments": 1,
  "solcInputHash": "28abbaaff2874685adeb45877b48c2b7",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_inititialSupply\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_priceFeed\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"test__NotOwner\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"whoever\",\"type\":\"address\"}],\"name\":\"SomeEvent\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"balance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"convertEthToUsd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"n\",\"type\":\"uint256\"}],\"name\":\"deletePerson\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"n\",\"type\":\"uint256\"}],\"name\":\"getPerson\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"_age\",\"type\":\"uint8\"},{\"internalType\":\"address payable\",\"name\":\"_wallet\",\"type\":\"address\"}],\"internalType\":\"struct test.Person\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPopulation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceFromConverter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRoundData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"i_initialSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"_age\",\"type\":\"uint8\"}],\"name\":\"newPerson\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"population\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"testAggregator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/test.sol\":\"test\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0x6e6e4b0835904509406b070ee173b5bc8f677c19421b76be38aea3b1b3d30846\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"contracts/PriceConverter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.18;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\nlibrary PriceConverter {\\n    function getPrice(\\n        AggregatorV3Interface priceFeed\\n    ) internal view returns (uint256) {\\n        (, int256 result, , , ) = priceFeed.latestRoundData();\\n        return uint256(result * 10000000000); // the rate is in decimals=18.  we are working with 8.  add 10 zeros\\n    }\\n\\n    function getConversionRate(\\n        uint256 ethAmount,\\n        AggregatorV3Interface priceFeed\\n    ) internal view returns (uint256) {\\n        uint256 ethPrice = getPrice(priceFeed);\\n        uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1000000000000000000;\\n        return ethAmountInUsd;\\n    }\\n}\\n\",\"keccak256\":\"0xbe223c96ee9afc732fbd489b91431d8137605d6eb3ba1f439d2c3b406276daaa\",\"license\":\"MIT\"},\"contracts/test.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.18;\\n\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"./PriceConverter.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\nerror test__SomeError();\\nerror test__NotOwner();\\n\\ncontract test {\\n    using Counters for Counters.Counter;\\n    using PriceConverter for uint256;\\n\\n    address public owner;\\n    uint256 public i_initialSupply;\\n    uint256 public balance;\\n    Counters.Counter public population;\\n    mapping(uint256 => Person) people;\\n    AggregatorV3Interface private s_priceFeed;\\n\\n    struct Person {\\n        uint256 _id;\\n        string _name;\\n        uint8 _age;\\n        address payable _wallet;\\n    }\\n\\n    event SomeEvent(address indexed whoever);\\n\\n    modifier isOwner(address who) {\\n        if (who != owner) {\\n            revert test__NotOwner();\\n        }\\n        _;\\n    }\\n\\n    constructor(uint256 _inititialSupply, address _priceFeed) {\\n        owner = msg.sender;\\n        i_initialSupply = _inititialSupply;\\n        balance = 0;\\n        people[0] = Person(\\n            population.current(),\\n            \\\"Ross\\\",\\n            32,\\n            payable(msg.sender)\\n        );\\n        s_priceFeed = AggregatorV3Interface(_priceFeed);\\n    }\\n\\n    function mint() public payable isOwner(msg.sender) {\\n        balance += 1;\\n    }\\n\\n    function newPerson(string memory _name, uint8 _age) public {\\n        population.increment();\\n        people[population.current()] = Person(\\n            population.current(),\\n            _name,\\n            _age,\\n            payable(msg.sender)\\n        );\\n    }\\n\\n    function getPerson(uint256 n) public view returns (Person memory) {        \\n        return people[n];\\n    }\\n    \\n    function deletePerson(uint256 n) public {\\n        population.decrement();\\n        delete people[n];\\n    }\\n\\n    function getPopulation() public view returns (uint256) {\\n        return population.current();\\n    }\\n\\n    function convertEthToUsd(uint256 _amount) public view returns (uint256) {\\n        return _amount.getConversionRate(s_priceFeed);\\n    }\\n\\n    function getPriceFromConverter() public view returns (uint256) {\\n        return PriceConverter.getPrice(s_priceFeed);\\n    }\\n\\n    // meaningless tests\\n    function testAggregator() public view returns (uint256) {\\n        return s_priceFeed.version();\\n    }\\n\\n    function getRoundData() public view returns (uint256) {\\n        (, int256 result, , , ) = s_priceFeed.latestRoundData();\\n        return uint256(result * 10000000000);\\n    }\\n}\\n\",\"keccak256\":\"0xbcf0f26e64f36d304a1ae16b250f93e64f111050f963ac14a13f2f5017c0d230\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162001ae738038062001ae78339818101604052810190620000379190620002a8565b336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508160018190555060006002819055506040518060800160405280620000a86003620001f560201b620008481760201c565b81526020016040518060400160405280600481526020017f526f7373000000000000000000000000000000000000000000000000000000008152508152602001602060ff1681526020013373ffffffffffffffffffffffffffffffffffffffff16815250600460008081526020019081526020016000206000820151816000015560208201518160010190816200014091906200055f565b5060408201518160020160006101000a81548160ff021916908360ff16021790555060608201518160020160016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555090505080600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505062000646565b600081600001549050919050565b600080fd5b6000819050919050565b6200021d8162000208565b81146200022957600080fd5b50565b6000815190506200023d8162000212565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620002708262000243565b9050919050565b620002828162000263565b81146200028e57600080fd5b50565b600081519050620002a28162000277565b92915050565b60008060408385031215620002c257620002c162000203565b5b6000620002d2858286016200022c565b9250506020620002e58582860162000291565b9150509250929050565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200037157607f821691505b60208210810362000387576200038662000329565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302620003f17fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82620003b2565b620003fd8683620003b2565b95508019841693508086168417925050509392505050565b6000819050919050565b6000620004406200043a620004348462000208565b62000415565b62000208565b9050919050565b6000819050919050565b6200045c836200041f565b620004746200046b8262000447565b848454620003bf565b825550505050565b600090565b6200048b6200047c565b6200049881848462000451565b505050565b5b81811015620004c057620004b460008262000481565b6001810190506200049e565b5050565b601f8211156200050f57620004d9816200038d565b620004e484620003a2565b81016020851015620004f4578190505b6200050c6200050385620003a2565b8301826200049d565b50505b505050565b600082821c905092915050565b6000620005346000198460080262000514565b1980831691505092915050565b60006200054f838362000521565b9150826002028217905092915050565b6200056a82620002ef565b67ffffffffffffffff811115620005865762000585620002fa565b5b62000592825462000358565b6200059f828285620004c4565b600060209050601f831160018114620005d75760008415620005c2578287015190505b620005ce858262000541565b8655506200063e565b601f198416620005e7866200038d565b60005b828110156200061157848901518255600182019150602085019450602081019050620005ea565b868310156200063157848901516200062d601f89168262000521565b8355505b6001600288020188555050505b505050505050565b61149180620006566000396000f3fe6080604052600436106100c25760003560e01c806378880f4a1161007f578063b69ef8a811610059578063b69ef8a814610239578063c086381e14610264578063d08c6803146102a1578063f46ca1be146102ca576100c2565b806378880f4a146101b85780638bdc6c16146101e35780638da5cb5b1461020e576100c2565b80631249c58b146100c7578063246982c4146100d15780632b4ae7bd1461010e5780635332a4d9146101395780636c2169ea1461016257806372142a451461018d575b600080fd5b6100cf6102f5565b005b3480156100dd57600080fd5b506100f860048036038101906100f39190610a7d565b610398565b6040516101059190610c09565b60405180910390f35b34801561011a57600080fd5b506101236104d4565b6040516101309190610c3a565b60405180910390f35b34801561014557600080fd5b50610160600480360381019061015b9190610db6565b6104e5565b005b34801561016e57600080fd5b506101776105dd565b6040516101849190610c3a565b60405180910390f35b34801561019957600080fd5b506101a261060f565b6040516101af9190610c3a565b60405180910390f35b3480156101c457600080fd5b506101cd6106c0565b6040516101da9190610c3a565b60405180910390f35b3480156101ef57600080fd5b506101f86106cc565b6040516102059190610c3a565b60405180910390f35b34801561021a57600080fd5b50610223610764565b6040516102309190610e33565b60405180910390f35b34801561024557600080fd5b5061024e610788565b60405161025b9190610c3a565b60405180910390f35b34801561027057600080fd5b5061028b60048036038101906102869190610a7d565b61078e565b6040516102989190610c3a565b60405180910390f35b3480156102ad57600080fd5b506102c860048036038101906102c39190610a7d565b6107cc565b005b3480156102d657600080fd5b506102df610842565b6040516102ec9190610c3a565b60405180910390f35b3360008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161461037b576040517f7bea902e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60016002600082825461038e9190610e7d565b9250508190555050565b6103a0610995565b60046000838152602001908152602001600020604051806080016040529081600082015481526020016001820180546103d890610ee0565b80601f016020809104026020016040519081016040528092919081815260200182805461040490610ee0565b80156104515780601f1061042657610100808354040283529160200191610451565b820191906000526020600020905b81548152906001019060200180831161043457829003601f168201915b505050505081526020016002820160009054906101000a900460ff1660ff1660ff1681526020016002820160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815250509050919050565b60006104e06003610848565b905090565b6104ef6003610856565b60405180608001604052806105046003610848565b81526020018381526020018260ff1681526020013373ffffffffffffffffffffffffffffffffffffffff16815250600460006105406003610848565b815260200190815260200160002060008201518160000155602082015181600101908161056d91906110bd565b5060408201518160020160006101000a81548160ff021916908360ff16021790555060608201518160020160016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509050505050565b600061060a600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1661086c565b905090565b600080600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa15801561067f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106a3919061121c565b5050509150506402540be400816106ba9190611297565b91505090565b60038060000154905081565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166354fd4d506040518163ffffffff1660e01b8152600401602060405180830381865afa15801561073b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061075f919061130f565b905090565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60025481565b60006107c5600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836108fd90919063ffffffff16565b9050919050565b6107d66003610939565b6004600082815260200190815260200160002060008082016000905560018201600061080291906109d6565b6002820160006101000a81549060ff02191690556002820160016101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055505050565b60015481565b600081600001549050919050565b6001816000016000828254019250508190555050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa1580156108ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108de919061121c565b5050509150506402540be400816108f59190611297565b915050919050565b6000806109098361086c565b90506000670de0b6b3a76400008583610922919061133c565b61092c91906113ad565b9050809250505092915050565b60008160000154905060008111610985576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161097c9061143b565b60405180910390fd5b6001810382600001819055505050565b60405180608001604052806000815260200160608152602001600060ff168152602001600073ffffffffffffffffffffffffffffffffffffffff1681525090565b5080546109e290610ee0565b6000825580601f106109f45750610a13565b601f016020900490600052602060002090810190610a129190610a16565b5b50565b5b80821115610a2f576000816000905550600101610a17565b5090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b610a5a81610a47565b8114610a6557600080fd5b50565b600081359050610a7781610a51565b92915050565b600060208284031215610a9357610a92610a3d565b5b6000610aa184828501610a68565b91505092915050565b610ab381610a47565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610af3578082015181840152602081019050610ad8565b60008484015250505050565b6000601f19601f8301169050919050565b6000610b1b82610ab9565b610b258185610ac4565b9350610b35818560208601610ad5565b610b3e81610aff565b840191505092915050565b600060ff82169050919050565b610b5f81610b49565b82525050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610b9082610b65565b9050919050565b610ba081610b85565b82525050565b6000608083016000830151610bbe6000860182610aaa565b5060208301518482036020860152610bd68282610b10565b9150506040830151610beb6040860182610b56565b506060830151610bfe6060860182610b97565b508091505092915050565b60006020820190508181036000830152610c238184610ba6565b905092915050565b610c3481610a47565b82525050565b6000602082019050610c4f6000830184610c2b565b92915050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610c9782610aff565b810181811067ffffffffffffffff82111715610cb657610cb5610c5f565b5b80604052505050565b6000610cc9610a33565b9050610cd58282610c8e565b919050565b600067ffffffffffffffff821115610cf557610cf4610c5f565b5b610cfe82610aff565b9050602081019050919050565b82818337600083830152505050565b6000610d2d610d2884610cda565b610cbf565b905082815260208101848484011115610d4957610d48610c5a565b5b610d54848285610d0b565b509392505050565b600082601f830112610d7157610d70610c55565b5b8135610d81848260208601610d1a565b91505092915050565b610d9381610b49565b8114610d9e57600080fd5b50565b600081359050610db081610d8a565b92915050565b60008060408385031215610dcd57610dcc610a3d565b5b600083013567ffffffffffffffff811115610deb57610dea610a42565b5b610df785828601610d5c565b9250506020610e0885828601610da1565b9150509250929050565b6000610e1d82610b65565b9050919050565b610e2d81610e12565b82525050565b6000602082019050610e486000830184610e24565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610e8882610a47565b9150610e9383610a47565b9250828201905080821115610eab57610eaa610e4e565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680610ef857607f821691505b602082108103610f0b57610f0a610eb1565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302610f737fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82610f36565b610f7d8683610f36565b95508019841693508086168417925050509392505050565b6000819050919050565b6000610fba610fb5610fb084610a47565b610f95565b610a47565b9050919050565b6000819050919050565b610fd483610f9f565b610fe8610fe082610fc1565b848454610f43565b825550505050565b600090565b610ffd610ff0565b611008818484610fcb565b505050565b5b8181101561102c57611021600082610ff5565b60018101905061100e565b5050565b601f8211156110715761104281610f11565b61104b84610f26565b8101602085101561105a578190505b61106e61106685610f26565b83018261100d565b50505b505050565b600082821c905092915050565b600061109460001984600802611076565b1980831691505092915050565b60006110ad8383611083565b9150826002028217905092915050565b6110c682610ab9565b67ffffffffffffffff8111156110df576110de610c5f565b5b6110e98254610ee0565b6110f4828285611030565b600060209050601f8311600181146111275760008415611115578287015190505b61111f85826110a1565b865550611187565b601f19841661113586610f11565b60005b8281101561115d57848901518255600182019150602085019450602081019050611138565b8683101561117a5784890151611176601f891682611083565b8355505b6001600288020188555050505b505050505050565b600069ffffffffffffffffffff82169050919050565b6111ae8161118f565b81146111b957600080fd5b50565b6000815190506111cb816111a5565b92915050565b6000819050919050565b6111e4816111d1565b81146111ef57600080fd5b50565b600081519050611201816111db565b92915050565b60008151905061121681610a51565b92915050565b600080600080600060a0868803121561123857611237610a3d565b5b6000611246888289016111bc565b9550506020611257888289016111f2565b945050604061126888828901611207565b935050606061127988828901611207565b925050608061128a888289016111bc565b9150509295509295909350565b60006112a2826111d1565b91506112ad836111d1565b92508282026112bb816111d1565b91507f800000000000000000000000000000000000000000000000000000000000000084146000841216156112f3576112f2610e4e565b5b828205841483151761130857611307610e4e565b5b5092915050565b60006020828403121561132557611324610a3d565b5b600061133384828501611207565b91505092915050565b600061134782610a47565b915061135283610a47565b925082820261136081610a47565b9150828204841483151761137757611376610e4e565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006113b882610a47565b91506113c383610a47565b9250826113d3576113d261137e565b5b828204905092915050565b600082825260208201905092915050565b7f436f756e7465723a2064656372656d656e74206f766572666c6f770000000000600082015250565b6000611425601b836113de565b9150611430826113ef565b602082019050919050565b6000602082019050818103600083015261145481611418565b905091905056fea264697066735822122070ed630d897ba1688f16e21f28b83572acefca788449435e00955d45107280cb64736f6c63430008120033",
  "deployedBytecode": "0x6080604052600436106100c25760003560e01c806378880f4a1161007f578063b69ef8a811610059578063b69ef8a814610239578063c086381e14610264578063d08c6803146102a1578063f46ca1be146102ca576100c2565b806378880f4a146101b85780638bdc6c16146101e35780638da5cb5b1461020e576100c2565b80631249c58b146100c7578063246982c4146100d15780632b4ae7bd1461010e5780635332a4d9146101395780636c2169ea1461016257806372142a451461018d575b600080fd5b6100cf6102f5565b005b3480156100dd57600080fd5b506100f860048036038101906100f39190610a7d565b610398565b6040516101059190610c09565b60405180910390f35b34801561011a57600080fd5b506101236104d4565b6040516101309190610c3a565b60405180910390f35b34801561014557600080fd5b50610160600480360381019061015b9190610db6565b6104e5565b005b34801561016e57600080fd5b506101776105dd565b6040516101849190610c3a565b60405180910390f35b34801561019957600080fd5b506101a261060f565b6040516101af9190610c3a565b60405180910390f35b3480156101c457600080fd5b506101cd6106c0565b6040516101da9190610c3a565b60405180910390f35b3480156101ef57600080fd5b506101f86106cc565b6040516102059190610c3a565b60405180910390f35b34801561021a57600080fd5b50610223610764565b6040516102309190610e33565b60405180910390f35b34801561024557600080fd5b5061024e610788565b60405161025b9190610c3a565b60405180910390f35b34801561027057600080fd5b5061028b60048036038101906102869190610a7d565b61078e565b6040516102989190610c3a565b60405180910390f35b3480156102ad57600080fd5b506102c860048036038101906102c39190610a7d565b6107cc565b005b3480156102d657600080fd5b506102df610842565b6040516102ec9190610c3a565b60405180910390f35b3360008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161461037b576040517f7bea902e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60016002600082825461038e9190610e7d565b9250508190555050565b6103a0610995565b60046000838152602001908152602001600020604051806080016040529081600082015481526020016001820180546103d890610ee0565b80601f016020809104026020016040519081016040528092919081815260200182805461040490610ee0565b80156104515780601f1061042657610100808354040283529160200191610451565b820191906000526020600020905b81548152906001019060200180831161043457829003601f168201915b505050505081526020016002820160009054906101000a900460ff1660ff1660ff1681526020016002820160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815250509050919050565b60006104e06003610848565b905090565b6104ef6003610856565b60405180608001604052806105046003610848565b81526020018381526020018260ff1681526020013373ffffffffffffffffffffffffffffffffffffffff16815250600460006105406003610848565b815260200190815260200160002060008201518160000155602082015181600101908161056d91906110bd565b5060408201518160020160006101000a81548160ff021916908360ff16021790555060608201518160020160016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509050505050565b600061060a600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1661086c565b905090565b600080600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa15801561067f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106a3919061121c565b5050509150506402540be400816106ba9190611297565b91505090565b60038060000154905081565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166354fd4d506040518163ffffffff1660e01b8152600401602060405180830381865afa15801561073b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061075f919061130f565b905090565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60025481565b60006107c5600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836108fd90919063ffffffff16565b9050919050565b6107d66003610939565b6004600082815260200190815260200160002060008082016000905560018201600061080291906109d6565b6002820160006101000a81549060ff02191690556002820160016101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055505050565b60015481565b600081600001549050919050565b6001816000016000828254019250508190555050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa1580156108ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108de919061121c565b5050509150506402540be400816108f59190611297565b915050919050565b6000806109098361086c565b90506000670de0b6b3a76400008583610922919061133c565b61092c91906113ad565b9050809250505092915050565b60008160000154905060008111610985576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161097c9061143b565b60405180910390fd5b6001810382600001819055505050565b60405180608001604052806000815260200160608152602001600060ff168152602001600073ffffffffffffffffffffffffffffffffffffffff1681525090565b5080546109e290610ee0565b6000825580601f106109f45750610a13565b601f016020900490600052602060002090810190610a129190610a16565b5b50565b5b80821115610a2f576000816000905550600101610a17565b5090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b610a5a81610a47565b8114610a6557600080fd5b50565b600081359050610a7781610a51565b92915050565b600060208284031215610a9357610a92610a3d565b5b6000610aa184828501610a68565b91505092915050565b610ab381610a47565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610af3578082015181840152602081019050610ad8565b60008484015250505050565b6000601f19601f8301169050919050565b6000610b1b82610ab9565b610b258185610ac4565b9350610b35818560208601610ad5565b610b3e81610aff565b840191505092915050565b600060ff82169050919050565b610b5f81610b49565b82525050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610b9082610b65565b9050919050565b610ba081610b85565b82525050565b6000608083016000830151610bbe6000860182610aaa565b5060208301518482036020860152610bd68282610b10565b9150506040830151610beb6040860182610b56565b506060830151610bfe6060860182610b97565b508091505092915050565b60006020820190508181036000830152610c238184610ba6565b905092915050565b610c3481610a47565b82525050565b6000602082019050610c4f6000830184610c2b565b92915050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610c9782610aff565b810181811067ffffffffffffffff82111715610cb657610cb5610c5f565b5b80604052505050565b6000610cc9610a33565b9050610cd58282610c8e565b919050565b600067ffffffffffffffff821115610cf557610cf4610c5f565b5b610cfe82610aff565b9050602081019050919050565b82818337600083830152505050565b6000610d2d610d2884610cda565b610cbf565b905082815260208101848484011115610d4957610d48610c5a565b5b610d54848285610d0b565b509392505050565b600082601f830112610d7157610d70610c55565b5b8135610d81848260208601610d1a565b91505092915050565b610d9381610b49565b8114610d9e57600080fd5b50565b600081359050610db081610d8a565b92915050565b60008060408385031215610dcd57610dcc610a3d565b5b600083013567ffffffffffffffff811115610deb57610dea610a42565b5b610df785828601610d5c565b9250506020610e0885828601610da1565b9150509250929050565b6000610e1d82610b65565b9050919050565b610e2d81610e12565b82525050565b6000602082019050610e486000830184610e24565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610e8882610a47565b9150610e9383610a47565b9250828201905080821115610eab57610eaa610e4e565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680610ef857607f821691505b602082108103610f0b57610f0a610eb1565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302610f737fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82610f36565b610f7d8683610f36565b95508019841693508086168417925050509392505050565b6000819050919050565b6000610fba610fb5610fb084610a47565b610f95565b610a47565b9050919050565b6000819050919050565b610fd483610f9f565b610fe8610fe082610fc1565b848454610f43565b825550505050565b600090565b610ffd610ff0565b611008818484610fcb565b505050565b5b8181101561102c57611021600082610ff5565b60018101905061100e565b5050565b601f8211156110715761104281610f11565b61104b84610f26565b8101602085101561105a578190505b61106e61106685610f26565b83018261100d565b50505b505050565b600082821c905092915050565b600061109460001984600802611076565b1980831691505092915050565b60006110ad8383611083565b9150826002028217905092915050565b6110c682610ab9565b67ffffffffffffffff8111156110df576110de610c5f565b5b6110e98254610ee0565b6110f4828285611030565b600060209050601f8311600181146111275760008415611115578287015190505b61111f85826110a1565b865550611187565b601f19841661113586610f11565b60005b8281101561115d57848901518255600182019150602085019450602081019050611138565b8683101561117a5784890151611176601f891682611083565b8355505b6001600288020188555050505b505050505050565b600069ffffffffffffffffffff82169050919050565b6111ae8161118f565b81146111b957600080fd5b50565b6000815190506111cb816111a5565b92915050565b6000819050919050565b6111e4816111d1565b81146111ef57600080fd5b50565b600081519050611201816111db565b92915050565b60008151905061121681610a51565b92915050565b600080600080600060a0868803121561123857611237610a3d565b5b6000611246888289016111bc565b9550506020611257888289016111f2565b945050604061126888828901611207565b935050606061127988828901611207565b925050608061128a888289016111bc565b9150509295509295909350565b60006112a2826111d1565b91506112ad836111d1565b92508282026112bb816111d1565b91507f800000000000000000000000000000000000000000000000000000000000000084146000841216156112f3576112f2610e4e565b5b828205841483151761130857611307610e4e565b5b5092915050565b60006020828403121561132557611324610a3d565b5b600061133384828501611207565b91505092915050565b600061134782610a47565b915061135283610a47565b925082820261136081610a47565b9150828204841483151761137757611376610e4e565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006113b882610a47565b91506113c383610a47565b9250826113d3576113d261137e565b5b828204905092915050565b600082825260208201905092915050565b7f436f756e7465723a2064656372656d656e74206f766572666c6f770000000000600082015250565b6000611425601b836113de565b9150611430826113ef565b602082019050919050565b6000602082019050818103600083015261145481611418565b905091905056fea264697066735822122070ed630d897ba1688f16e21f28b83572acefca788449435e00955d45107280cb64736f6c63430008120033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 191,
        "contract": "contracts/test.sol:test",
        "label": "owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 193,
        "contract": "contracts/test.sol:test",
        "label": "i_initialSupply",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 195,
        "contract": "contracts/test.sol:test",
        "label": "balance",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 198,
        "contract": "contracts/test.sol:test",
        "label": "population",
        "offset": 0,
        "slot": "3",
        "type": "t_struct(Counter)51_storage"
      },
      {
        "astId": 203,
        "contract": "contracts/test.sol:test",
        "label": "people",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_struct(Person)215_storage)"
      },
      {
        "astId": 206,
        "contract": "contracts/test.sol:test",
        "label": "s_priceFeed",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(AggregatorV3Interface)45"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_uint256,t_struct(Person)215_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct test.Person)",
        "numberOfBytes": "32",
        "value": "t_struct(Person)215_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Counter)51_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 50,
            "contract": "contracts/test.sol:test",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Person)215_storage": {
        "encoding": "inplace",
        "label": "struct test.Person",
        "members": [
          {
            "astId": 208,
            "contract": "contracts/test.sol:test",
            "label": "_id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 210,
            "contract": "contracts/test.sol:test",
            "label": "_name",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 212,
            "contract": "contracts/test.sol:test",
            "label": "_age",
            "offset": 0,
            "slot": "2",
            "type": "t_uint8"
          },
          {
            "astId": 214,
            "contract": "contracts/test.sol:test",
            "label": "_wallet",
            "offset": 1,
            "slot": "2",
            "type": "t_address_payable"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}