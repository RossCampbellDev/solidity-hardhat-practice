{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/utils/Counters.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title Counters\n * @author Matt Condon (@shrugs)\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\n *\n * Include with `using Counters for Counters.Counter;`\n */\nlibrary Counters {\n    struct Counter {\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\n        uint256 _value; // default: 0\n    }\n\n    function current(Counter storage counter) internal view returns (uint256) {\n        return counter._value;\n    }\n\n    function increment(Counter storage counter) internal {\n        unchecked {\n            counter._value += 1;\n        }\n    }\n\n    function decrement(Counter storage counter) internal {\n        uint256 value = counter._value;\n        require(value > 0, \"Counter: decrement overflow\");\n        unchecked {\n            counter._value = value - 1;\n        }\n    }\n\n    function reset(Counter storage counter) internal {\n        counter._value = 0;\n    }\n}\n"
    },
    "contracts/test.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.18;\n\nimport \"@openzeppelin/contracts/utils/Counters.sol\";\n\ncontract test {\n    using Counters for Counters.Counter;\n\n    address public owner;\n    uint256 public i_initialSupply;\n    uint256 public balance;\n    Counters.Counter public population;\n    mapping(uint256 => Person) people;\n\n    struct Person {\n        uint256 _id;\n        string _name;\n        uint8 _age;\n        address payable _wallet;\n    }\n\n    constructor(uint256 _inititialSupply) {\n        owner = msg.sender;\n        i_initialSupply = _inititialSupply;\n        balance = 0;\n        people[0] = Person(\n            population.current(),\n            \"Ross\",\n            32,\n            payable(msg.sender)\n        );\n    }\n\n    function mint() public payable {\n        balance += 1;\n    }\n\n    function newPerson(string memory _name, uint8 _age) public {\n        population.increment();\n        people[population.current()] = Person(\n            population.current(),\n            _name,\n            _age,\n            payable(msg.sender)\n        );\n    }\n\n    function getPerson(uint256 n) public view returns (Person memory) {\n        return people[n];\n    }\n\n    function getPopulation() public view returns (uint256) {\n        return population.current();\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}