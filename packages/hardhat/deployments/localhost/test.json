{
  "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_inititialSupply",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_priceFeed",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "test__NotOwner",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "whoever",
          "type": "address"
        }
      ],
      "name": "SomeEvent",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "balance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "n",
          "type": "uint256"
        }
      ],
      "name": "getPerson",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "_id",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "_name",
              "type": "string"
            },
            {
              "internalType": "uint8",
              "name": "_age",
              "type": "uint8"
            },
            {
              "internalType": "address payable",
              "name": "_wallet",
              "type": "address"
            }
          ],
          "internalType": "struct test.Person",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPopulation",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "i_initialSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mint",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "uint8",
          "name": "_age",
          "type": "uint8"
        }
      ],
      "name": "newPerson",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "population",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "testAggregator",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xe117b4d52d00a5b73cc541ce057678242a09da59afc1c9f6086d7054e7ca5069",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "transactionIndex": 0,
    "gasUsed": "964671",
    "logsBloom": "0x
    "blockHash": "0xf59550d99047bbec619ec27593eeb1d110c690ee32420d0ccdbc6acbb5668a60",
    "transactionHash": "0xe117b4d52d00a5b73cc541ce057678242a09da59afc1c9f6086d7054e7ca5069",
    "logs": [],
    "blockNumber": 2,
    "cumulativeGasUsed": "964671",
    "status": 1,
    "byzantium": true
  },
  "args": [
    25,
    "0x5FbDB2315678afecb367f032d93F642f64180aa3"
  ],
  "numDeployments": 1,
  "solcInputHash": "6f9cf789ec5be15b5464a546dd7d70d6",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_inititialSupply\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_priceFeed\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"test__NotOwner\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"whoever\",\"type\":\"address\"}],\"name\":\"SomeEvent\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"balance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"n\",\"type\":\"uint256\"}],\"name\":\"getPerson\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"_age\",\"type\":\"uint8\"},{\"internalType\":\"address payable\",\"name\":\"_wallet\",\"type\":\"address\"}],\"internalType\":\"struct test.Person\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPopulation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"i_initialSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"_age\",\"type\":\"uint8\"}],\"name\":\"newPerson\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"population\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"testAggregator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/test.sol\":\"test\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0x6e6e4b0835904509406b070ee173b5bc8f677c19421b76be38aea3b1b3d30846\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"contracts/test.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.18;\\n\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\nerror test__SomeError();\\nerror test__NotOwner();\\n\\ncontract test {\\n    using Counters for Counters.Counter;\\n\\n    address public owner;\\n    uint256 public i_initialSupply;\\n    uint256 public balance;\\n    Counters.Counter public population;\\n    mapping(uint256 => Person) people;\\n    AggregatorV3Interface private s_priceFeed;\\n\\n    struct Person {\\n        uint256 _id;\\n        string _name;\\n        uint8 _age;\\n        address payable _wallet;\\n    }\\n\\n    event SomeEvent(address indexed whoever);\\n\\n    modifier isOwner(address who) {\\n        if (who != owner) {\\n            revert test__NotOwner();\\n        }\\n        _;\\n    }\\n\\n    constructor(uint256 _inititialSupply, address _priceFeed) {\\n        owner = msg.sender;\\n        i_initialSupply = _inititialSupply;\\n        balance = 0;\\n        people[0] = Person(\\n            population.current(),\\n            \\\"Ross\\\",\\n            32,\\n            payable(msg.sender)\\n        );\\n        s_priceFeed = AggregatorV3Interface(_priceFeed);\\n    }\\n\\n    function mint() public payable isOwner(msg.sender) {\\n        balance += 1;\\n    }\\n\\n    function newPerson(string memory _name, uint8 _age) public {\\n        population.increment();\\n        people[population.current()] = Person(\\n            population.current(),\\n            _name,\\n            _age,\\n            payable(msg.sender)\\n        );\\n    }\\n\\n    function getPerson(uint256 n) public view returns (Person memory) {\\n        return people[n];\\n    }\\n\\n    function getPopulation() public view returns (uint256) {\\n        return population.current();\\n    }\\n\\n    function testAggregator() public view returns (uint256) {\\n        return s_priceFeed.version();\\n    }\\n\\n    /*function getConversionRate(\\n        uint256 ethAmount\\n    ) public view returns (uint256) {\\n        uint256 ethPrice = getPrice(s_priceFeed);\\n        uint256 ethAmountInUsd = (ethPrice * ethAmount) /\\n            s_priceFeed.decimals();\\n        return ethAmountInUsd;\\n    }*/\\n}\\n\",\"keccak256\":\"0xb0af6b6cd1d722ec50c41d13237561ec5a79ead5b7eff5f213ca8c459014716a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162001448380380620014488339818101604052810190620000379190620002a8565b336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508160018190555060006002819055506040518060800160405280620000a86003620001f560201b620005b91760201c565b81526020016040518060400160405280600481526020017f526f7373000000000000000000000000000000000000000000000000000000008152508152602001602060ff1681526020013373ffffffffffffffffffffffffffffffffffffffff16815250600460008081526020019081526020016000206000820151816000015560208201518160010190816200014091906200055f565b5060408201518160020160006101000a81548160ff021916908360ff16021790555060608201518160020160016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555090505080600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505062000646565b600081600001549050919050565b600080fd5b6000819050919050565b6200021d8162000208565b81146200022957600080fd5b50565b6000815190506200023d8162000212565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620002708262000243565b9050919050565b620002828162000263565b81146200028e57600080fd5b50565b600081519050620002a28162000277565b92915050565b60008060408385031215620002c257620002c162000203565b5b6000620002d2858286016200022c565b9250506020620002e58582860162000291565b9150509250929050565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200037157607f821691505b60208210810362000387576200038662000329565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302620003f17fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82620003b2565b620003fd8683620003b2565b95508019841693508086168417925050509392505050565b6000819050919050565b6000620004406200043a620004348462000208565b62000415565b62000208565b9050919050565b6000819050919050565b6200045c836200041f565b620004746200046b8262000447565b848454620003bf565b825550505050565b600090565b6200048b6200047c565b6200049881848462000451565b505050565b5b81811015620004c057620004b460008262000481565b6001810190506200049e565b5050565b601f8211156200050f57620004d9816200038d565b620004e484620003a2565b81016020851015620004f4578190505b6200050c6200050385620003a2565b8301826200049d565b50505b505050565b600082821c905092915050565b6000620005346000198460080262000514565b1980831691505092915050565b60006200054f838362000521565b9150826002028217905092915050565b6200056a82620002ef565b67ffffffffffffffff811115620005865762000585620002fa565b5b62000592825462000358565b6200059f828285620004c4565b600060209050601f831160018114620005d75760008415620005c2578287015190505b620005ce858262000541565b8655506200063e565b601f198416620005e7866200038d565b60005b828110156200061157848901518255600182019150602085019450602081019050620005ea565b868310156200063157848901516200062d601f89168262000521565b8355505b6001600288020188555050505b505050505050565b610df280620006566000396000f3fe6080604052600436106100865760003560e01c806378880f4a1161005957806378880f4a146101265780638bdc6c16146101515780638da5cb5b1461017c578063b69ef8a8146101a7578063f46ca1be146101d257610086565b80631249c58b1461008b578063246982c4146100955780632b4ae7bd146100d25780635332a4d9146100fd575b600080fd5b6100936101fd565b005b3480156100a157600080fd5b506100bc60048036038101906100b79190610668565b6102a0565b6040516100c991906107f4565b60405180910390f35b3480156100de57600080fd5b506100e76103dc565b6040516100f49190610825565b60405180910390f35b34801561010957600080fd5b50610124600480360381019061011f91906109a1565b6103ed565b005b34801561013257600080fd5b5061013b6104e5565b6040516101489190610825565b60405180910390f35b34801561015d57600080fd5b506101666104f1565b6040516101739190610825565b60405180910390f35b34801561018857600080fd5b50610191610589565b60405161019e9190610a1e565b60405180910390f35b3480156101b357600080fd5b506101bc6105ad565b6040516101c99190610825565b60405180910390f35b3480156101de57600080fd5b506101e76105b3565b6040516101f49190610825565b60405180910390f35b3360008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610283576040517f7bea902e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600260008282546102969190610a68565b9250508190555050565b6102a86105dd565b60046000838152602001908152602001600020604051806080016040529081600082015481526020016001820180546102e090610acb565b80601f016020809104026020016040519081016040528092919081815260200182805461030c90610acb565b80156103595780601f1061032e57610100808354040283529160200191610359565b820191906000526020600020905b81548152906001019060200180831161033c57829003601f168201915b505050505081526020016002820160009054906101000a900460ff1660ff1660ff1681526020016002820160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815250509050919050565b60006103e860036105b9565b905090565b6103f760036105c7565b604051806080016040528061040c60036105b9565b81526020018381526020018260ff1681526020013373ffffffffffffffffffffffffffffffffffffffff168152506004600061044860036105b9565b81526020019081526020016000206000820151816000015560208201518160010190816104759190610ca8565b5060408201518160020160006101000a81548160ff021916908360ff16021790555060608201518160020160016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509050505050565b60038060000154905081565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166354fd4d506040518163ffffffff1660e01b8152600401602060405180830381865afa158015610560573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105849190610d8f565b905090565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60025481565b60015481565b600081600001549050919050565b6001816000016000828254019250508190555050565b60405180608001604052806000815260200160608152602001600060ff168152602001600073ffffffffffffffffffffffffffffffffffffffff1681525090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b61064581610632565b811461065057600080fd5b50565b6000813590506106628161063c565b92915050565b60006020828403121561067e5761067d610628565b5b600061068c84828501610653565b91505092915050565b61069e81610632565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b838110156106de5780820151818401526020810190506106c3565b60008484015250505050565b6000601f19601f8301169050919050565b6000610706826106a4565b61071081856106af565b93506107208185602086016106c0565b610729816106ea565b840191505092915050565b600060ff82169050919050565b61074a81610734565b82525050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061077b82610750565b9050919050565b61078b81610770565b82525050565b60006080830160008301516107a96000860182610695565b50602083015184820360208601526107c182826106fb565b91505060408301516107d66040860182610741565b5060608301516107e96060860182610782565b508091505092915050565b6000602082019050818103600083015261080e8184610791565b905092915050565b61081f81610632565b82525050565b600060208201905061083a6000830184610816565b92915050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610882826106ea565b810181811067ffffffffffffffff821117156108a1576108a061084a565b5b80604052505050565b60006108b461061e565b90506108c08282610879565b919050565b600067ffffffffffffffff8211156108e0576108df61084a565b5b6108e9826106ea565b9050602081019050919050565b82818337600083830152505050565b6000610918610913846108c5565b6108aa565b90508281526020810184848401111561093457610933610845565b5b61093f8482856108f6565b509392505050565b600082601f83011261095c5761095b610840565b5b813561096c848260208601610905565b91505092915050565b61097e81610734565b811461098957600080fd5b50565b60008135905061099b81610975565b92915050565b600080604083850312156109b8576109b7610628565b5b600083013567ffffffffffffffff8111156109d6576109d561062d565b5b6109e285828601610947565b92505060206109f38582860161098c565b9150509250929050565b6000610a0882610750565b9050919050565b610a18816109fd565b82525050565b6000602082019050610a336000830184610a0f565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610a7382610632565b9150610a7e83610632565b9250828201905080821115610a9657610a95610a39565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680610ae357607f821691505b602082108103610af657610af5610a9c565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302610b5e7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82610b21565b610b688683610b21565b95508019841693508086168417925050509392505050565b6000819050919050565b6000610ba5610ba0610b9b84610632565b610b80565b610632565b9050919050565b6000819050919050565b610bbf83610b8a565b610bd3610bcb82610bac565b848454610b2e565b825550505050565b600090565b610be8610bdb565b610bf3818484610bb6565b505050565b5b81811015610c1757610c0c600082610be0565b600181019050610bf9565b5050565b601f821115610c5c57610c2d81610afc565b610c3684610b11565b81016020851015610c45578190505b610c59610c5185610b11565b830182610bf8565b50505b505050565b600082821c905092915050565b6000610c7f60001984600802610c61565b1980831691505092915050565b6000610c988383610c6e565b9150826002028217905092915050565b610cb1826106a4565b67ffffffffffffffff811115610cca57610cc961084a565b5b610cd48254610acb565b610cdf828285610c1b565b600060209050601f831160018114610d125760008415610d00578287015190505b610d0a8582610c8c565b865550610d72565b601f198416610d2086610afc565b60005b82811015610d4857848901518255600182019150602085019450602081019050610d23565b86831015610d655784890151610d61601f891682610c6e565b8355505b6001600288020188555050505b505050505050565b600081519050610d898161063c565b92915050565b600060208284031215610da557610da4610628565b5b6000610db384828501610d7a565b9150509291505056fea26469706673582212200b8e1fe381f8f64e315d513ae5c606cbace3ffa79cfc80cf216c958a63e7051164736f6c63430008120033",
  "deployedBytecode": "0x6080604052600436106100865760003560e01c806378880f4a1161005957806378880f4a146101265780638bdc6c16146101515780638da5cb5b1461017c578063b69ef8a8146101a7578063f46ca1be146101d257610086565b80631249c58b1461008b578063246982c4146100955780632b4ae7bd146100d25780635332a4d9146100fd575b600080fd5b6100936101fd565b005b3480156100a157600080fd5b506100bc60048036038101906100b79190610668565b6102a0565b6040516100c991906107f4565b60405180910390f35b3480156100de57600080fd5b506100e76103dc565b6040516100f49190610825565b60405180910390f35b34801561010957600080fd5b50610124600480360381019061011f91906109a1565b6103ed565b005b34801561013257600080fd5b5061013b6104e5565b6040516101489190610825565b60405180910390f35b34801561015d57600080fd5b506101666104f1565b6040516101739190610825565b60405180910390f35b34801561018857600080fd5b50610191610589565b60405161019e9190610a1e565b60405180910390f35b3480156101b357600080fd5b506101bc6105ad565b6040516101c99190610825565b60405180910390f35b3480156101de57600080fd5b506101e76105b3565b6040516101f49190610825565b60405180910390f35b3360008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610283576040517f7bea902e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600260008282546102969190610a68565b9250508190555050565b6102a86105dd565b60046000838152602001908152602001600020604051806080016040529081600082015481526020016001820180546102e090610acb565b80601f016020809104026020016040519081016040528092919081815260200182805461030c90610acb565b80156103595780601f1061032e57610100808354040283529160200191610359565b820191906000526020600020905b81548152906001019060200180831161033c57829003601f168201915b505050505081526020016002820160009054906101000a900460ff1660ff1660ff1681526020016002820160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815250509050919050565b60006103e860036105b9565b905090565b6103f760036105c7565b604051806080016040528061040c60036105b9565b81526020018381526020018260ff1681526020013373ffffffffffffffffffffffffffffffffffffffff168152506004600061044860036105b9565b81526020019081526020016000206000820151816000015560208201518160010190816104759190610ca8565b5060408201518160020160006101000a81548160ff021916908360ff16021790555060608201518160020160016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509050505050565b60038060000154905081565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166354fd4d506040518163ffffffff1660e01b8152600401602060405180830381865afa158015610560573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105849190610d8f565b905090565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60025481565b60015481565b600081600001549050919050565b6001816000016000828254019250508190555050565b60405180608001604052806000815260200160608152602001600060ff168152602001600073ffffffffffffffffffffffffffffffffffffffff1681525090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b61064581610632565b811461065057600080fd5b50565b6000813590506106628161063c565b92915050565b60006020828403121561067e5761067d610628565b5b600061068c84828501610653565b91505092915050565b61069e81610632565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b838110156106de5780820151818401526020810190506106c3565b60008484015250505050565b6000601f19601f8301169050919050565b6000610706826106a4565b61071081856106af565b93506107208185602086016106c0565b610729816106ea565b840191505092915050565b600060ff82169050919050565b61074a81610734565b82525050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061077b82610750565b9050919050565b61078b81610770565b82525050565b60006080830160008301516107a96000860182610695565b50602083015184820360208601526107c182826106fb565b91505060408301516107d66040860182610741565b5060608301516107e96060860182610782565b508091505092915050565b6000602082019050818103600083015261080e8184610791565b905092915050565b61081f81610632565b82525050565b600060208201905061083a6000830184610816565b92915050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610882826106ea565b810181811067ffffffffffffffff821117156108a1576108a061084a565b5b80604052505050565b60006108b461061e565b90506108c08282610879565b919050565b600067ffffffffffffffff8211156108e0576108df61084a565b5b6108e9826106ea565b9050602081019050919050565b82818337600083830152505050565b6000610918610913846108c5565b6108aa565b90508281526020810184848401111561093457610933610845565b5b61093f8482856108f6565b509392505050565b600082601f83011261095c5761095b610840565b5b813561096c848260208601610905565b91505092915050565b61097e81610734565b811461098957600080fd5b50565b60008135905061099b81610975565b92915050565b600080604083850312156109b8576109b7610628565b5b600083013567ffffffffffffffff8111156109d6576109d561062d565b5b6109e285828601610947565b92505060206109f38582860161098c565b9150509250929050565b6000610a0882610750565b9050919050565b610a18816109fd565b82525050565b6000602082019050610a336000830184610a0f565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610a7382610632565b9150610a7e83610632565b9250828201905080821115610a9657610a95610a39565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680610ae357607f821691505b602082108103610af657610af5610a9c565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302610b5e7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82610b21565b610b688683610b21565b95508019841693508086168417925050509392505050565b6000819050919050565b6000610ba5610ba0610b9b84610632565b610b80565b610632565b9050919050565b6000819050919050565b610bbf83610b8a565b610bd3610bcb82610bac565b848454610b2e565b825550505050565b600090565b610be8610bdb565b610bf3818484610bb6565b505050565b5b81811015610c1757610c0c600082610be0565b600181019050610bf9565b5050565b601f821115610c5c57610c2d81610afc565b610c3684610b11565b81016020851015610c45578190505b610c59610c5185610b11565b830182610bf8565b50505b505050565b600082821c905092915050565b6000610c7f60001984600802610c61565b1980831691505092915050565b6000610c988383610c6e565b9150826002028217905092915050565b610cb1826106a4565b67ffffffffffffffff811115610cca57610cc961084a565b5b610cd48254610acb565b610cdf828285610c1b565b600060209050601f831160018114610d125760008415610d00578287015190505b610d0a8582610c8c565b865550610d72565b601f198416610d2086610afc565b60005b82811015610d4857848901518255600182019150602085019450602081019050610d23565b86831015610d655784890151610d61601f891682610c6e565b8355505b6001600288020188555050505b505050505050565b600081519050610d898161063c565b92915050565b600060208284031215610da557610da4610628565b5b6000610db384828501610d7a565b9150509291505056fea26469706673582212200b8e1fe381f8f64e315d513ae5c606cbace3ffa79cfc80cf216c958a63e7051164736f6c63430008120033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 133,
        "contract": "contracts/test.sol:test",
        "label": "owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 135,
        "contract": "contracts/test.sol:test",
        "label": "i_initialSupply",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 137,
        "contract": "contracts/test.sol:test",
        "label": "balance",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 140,
        "contract": "contracts/test.sol:test",
        "label": "population",
        "offset": 0,
        "slot": "3",
        "type": "t_struct(Counter)51_storage"
      },
      {
        "astId": 145,
        "contract": "contracts/test.sol:test",
        "label": "people",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_struct(Person)157_storage)"
      },
      {
        "astId": 148,
        "contract": "contracts/test.sol:test",
        "label": "s_priceFeed",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(AggregatorV3Interface)45"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_uint256,t_struct(Person)157_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct test.Person)",
        "numberOfBytes": "32",
        "value": "t_struct(Person)157_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Counter)51_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 50,
            "contract": "contracts/test.sol:test",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Person)157_storage": {
        "encoding": "inplace",
        "label": "struct test.Person",
        "members": [
          {
            "astId": 150,
            "contract": "contracts/test.sol:test",
            "label": "_id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 152,
            "contract": "contracts/test.sol:test",
            "label": "_name",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 154,
            "contract": "contracts/test.sol:test",
            "label": "_age",
            "offset": 0,
            "slot": "2",
            "type": "t_uint8"
          },
          {
            "astId": 156,
            "contract": "contracts/test.sol:test",
            "label": "_wallet",
            "offset": 1,
            "slot": "2",
            "type": "t_address_payable"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}