{
  "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_inititialSupply",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_priceFeed",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "test__NotOwner",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "whoever",
          "type": "address"
        }
      ],
      "name": "SomeEvent",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "balance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "convertEthToUsd",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "n",
          "type": "uint256"
        }
      ],
      "name": "deletePerson",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "n",
          "type": "uint256"
        }
      ],
      "name": "getPerson",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "_id",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "_name",
              "type": "string"
            },
            {
              "internalType": "uint8",
              "name": "_age",
              "type": "uint8"
            },
            {
              "internalType": "address payable",
              "name": "_wallet",
              "type": "address"
            }
          ],
          "internalType": "struct test.Person",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPopulation",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPriceFromConverter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRoundData",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "i_initialSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mint",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "uint8",
          "name": "_age",
          "type": "uint8"
        }
      ],
      "name": "newPerson",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "population",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "testAggregator",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x48c82543de04430dbf81fea6b7c3197f65ab331ffe149c924e53f2a28ea12e2e",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "transactionIndex": 0,
    "gasUsed": "1280751",
    "logsBloom": "0x
    "blockHash": "0x38a72b282a09ef1de2953acc995e7b34f3c348b5a3d2b2837140d1fbcd8a0a13",
    "transactionHash": "0x48c82543de04430dbf81fea6b7c3197f65ab331ffe149c924e53f2a28ea12e2e",
    "logs": [],
    "blockNumber": 2,
    "cumulativeGasUsed": "1280751",
    "status": 1,
    "byzantium": true
  },
  "args": [
    25,
    "0x5FbDB2315678afecb367f032d93F642f64180aa3"
  ],
  "numDeployments": 1,
  "solcInputHash": "94cccad84a7076ce95b8fca23e0addc4",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_inititialSupply\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_priceFeed\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"test__NotOwner\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"whoever\",\"type\":\"address\"}],\"name\":\"SomeEvent\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"balance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"convertEthToUsd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"n\",\"type\":\"uint256\"}],\"name\":\"deletePerson\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"n\",\"type\":\"uint256\"}],\"name\":\"getPerson\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"_age\",\"type\":\"uint8\"},{\"internalType\":\"address payable\",\"name\":\"_wallet\",\"type\":\"address\"}],\"internalType\":\"struct test.Person\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPopulation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceFromConverter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRoundData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"i_initialSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"_age\",\"type\":\"uint8\"}],\"name\":\"newPerson\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"population\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"testAggregator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/test.sol\":\"test\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0x6e6e4b0835904509406b070ee173b5bc8f677c19421b76be38aea3b1b3d30846\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"contracts/PriceConverter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.18;\\r\\n\\r\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\r\\n\\r\\nlibrary PriceConverter {\\r\\n    function getPrice(\\r\\n        AggregatorV3Interface priceFeed\\r\\n    ) internal view returns (uint256) {\\r\\n        (, int256 result, , , ) = priceFeed.latestRoundData();\\r\\n        return uint256(result * 10000000000); // the rate is in decimals=18.  we are working with 8.  add 10 zeros\\r\\n    }\\r\\n\\r\\n    function getConversionRate(\\r\\n        uint256 ethAmount,\\r\\n        AggregatorV3Interface priceFeed\\r\\n    ) internal view returns (uint256) {\\r\\n        uint256 ethPrice = getPrice(priceFeed);\\r\\n        uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1000000000000000000;\\r\\n        return ethAmountInUsd;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x95311d7434cc076b9a479c5eb28f42005a69de820402f7906ab13c4cb37780e9\",\"license\":\"MIT\"},\"contracts/test.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.18;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\r\\nimport \\\"./PriceConverter.sol\\\";\\r\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\r\\n\\r\\nerror test__SomeError();\\r\\nerror test__NotOwner();\\r\\n\\r\\ncontract test {\\r\\n    using Counters for Counters.Counter;\\r\\n    using PriceConverter for uint256;\\r\\n\\r\\n    address public owner;\\r\\n    uint256 public i_initialSupply;\\r\\n    uint256 public balance;\\r\\n    Counters.Counter public population;\\r\\n    mapping(uint256 => Person) people;\\r\\n    AggregatorV3Interface private s_priceFeed;\\r\\n\\r\\n    struct Person {\\r\\n        uint256 _id;\\r\\n        string _name;\\r\\n        uint8 _age;\\r\\n        address payable _wallet;\\r\\n    }\\r\\n\\r\\n    event SomeEvent(address indexed whoever);\\r\\n\\r\\n    modifier isOwner(address who) {\\r\\n        if (who != owner) {\\r\\n            revert test__NotOwner();\\r\\n        }\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    constructor(uint256 _inititialSupply, address _priceFeed) {\\r\\n        owner = msg.sender;\\r\\n        i_initialSupply = _inititialSupply;\\r\\n        balance = 0;\\r\\n        people[0] = Person(\\r\\n            population.current(),\\r\\n            \\\"Ross\\\",\\r\\n            32,\\r\\n            payable(msg.sender)\\r\\n        );\\r\\n        s_priceFeed = AggregatorV3Interface(_priceFeed);\\r\\n    }\\r\\n\\r\\n    function mint() public payable isOwner(msg.sender) {\\r\\n        balance += 1;\\r\\n    }\\r\\n\\r\\n    function newPerson(string memory _name, uint8 _age) public {\\r\\n        population.increment();\\r\\n        people[population.current()] = Person(\\r\\n            population.current(),\\r\\n            _name,\\r\\n            _age,\\r\\n            payable(msg.sender)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function getPerson(uint256 n) public view returns (Person memory) {        \\r\\n        return people[n];\\r\\n    }\\r\\n    \\r\\n    function deletePerson(uint256 n) public {\\r\\n        delete people[n];\\r\\n    }\\r\\n\\r\\n    function getPopulation() public view returns (uint256) {\\r\\n        return population.current();\\r\\n    }\\r\\n\\r\\n    function convertEthToUsd(uint256 _amount) public view returns (uint256) {\\r\\n        return _amount.getConversionRate(s_priceFeed);\\r\\n    }\\r\\n\\r\\n    function getPriceFromConverter() public view returns (uint256) {\\r\\n        return PriceConverter.getPrice(s_priceFeed);\\r\\n    }\\r\\n\\r\\n    // meaningless tests\\r\\n    function testAggregator() public view returns (uint256) {\\r\\n        return s_priceFeed.version();\\r\\n    }\\r\\n\\r\\n    function getRoundData() public view returns (uint256) {\\r\\n        (, int256 result, , , ) = s_priceFeed.latestRoundData();\\r\\n        return uint256(result * 10000000000);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x9e6eb97090aac928163b716aecddb80ff13bea93a70cbf287c128e7b3f10f377\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162001a0438038062001a048339818101604052810190620000379190620002a8565b336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508160018190555060006002819055506040518060800160405280620000a86003620001f560201b6200083e1760201c565b81526020016040518060400160405280600481526020017f526f7373000000000000000000000000000000000000000000000000000000008152508152602001602060ff1681526020013373ffffffffffffffffffffffffffffffffffffffff16815250600460008081526020019081526020016000206000820151816000015560208201518160010190816200014091906200055f565b5060408201518160020160006101000a81548160ff021916908360ff16021790555060608201518160020160016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555090505080600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505062000646565b600081600001549050919050565b600080fd5b6000819050919050565b6200021d8162000208565b81146200022957600080fd5b50565b6000815190506200023d8162000212565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620002708262000243565b9050919050565b620002828162000263565b81146200028e57600080fd5b50565b600081519050620002a28162000277565b92915050565b60008060408385031215620002c257620002c162000203565b5b6000620002d2858286016200022c565b9250506020620002e58582860162000291565b9150509250929050565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200037157607f821691505b60208210810362000387576200038662000329565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302620003f17fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82620003b2565b620003fd8683620003b2565b95508019841693508086168417925050509392505050565b6000819050919050565b6000620004406200043a620004348462000208565b62000415565b62000208565b9050919050565b6000819050919050565b6200045c836200041f565b620004746200046b8262000447565b848454620003bf565b825550505050565b600090565b6200048b6200047c565b6200049881848462000451565b505050565b5b81811015620004c057620004b460008262000481565b6001810190506200049e565b5050565b601f8211156200050f57620004d9816200038d565b620004e484620003a2565b81016020851015620004f4578190505b6200050c6200050385620003a2565b8301826200049d565b50505b505050565b600082821c905092915050565b6000620005346000198460080262000514565b1980831691505092915050565b60006200054f838362000521565b9150826002028217905092915050565b6200056a82620002ef565b67ffffffffffffffff811115620005865762000585620002fa565b5b62000592825462000358565b6200059f828285620004c4565b600060209050601f831160018114620005d75760008415620005c2578287015190505b620005ce858262000541565b8655506200063e565b601f198416620005e7866200038d565b60005b828110156200061157848901518255600182019150602085019450602081019050620005ea565b868310156200063157848901516200062d601f89168262000521565b8355505b6001600288020188555050505b505050505050565b6113ae80620006566000396000f3fe6080604052600436106100c25760003560e01c806378880f4a1161007f578063b69ef8a811610059578063b69ef8a814610239578063c086381e14610264578063d08c6803146102a1578063f46ca1be146102ca576100c2565b806378880f4a146101b85780638bdc6c16146101e35780638da5cb5b1461020e576100c2565b80631249c58b146100c7578063246982c4146100d15780632b4ae7bd1461010e5780635332a4d9146101395780636c2169ea1461016257806372142a451461018d575b600080fd5b6100cf6102f5565b005b3480156100dd57600080fd5b506100f860048036038101906100f39190610a17565b610398565b6040516101059190610ba3565b60405180910390f35b34801561011a57600080fd5b506101236104d4565b6040516101309190610bd4565b60405180910390f35b34801561014557600080fd5b50610160600480360381019061015b9190610d50565b6104e5565b005b34801561016e57600080fd5b506101776105dd565b6040516101849190610bd4565b60405180910390f35b34801561019957600080fd5b506101a261060f565b6040516101af9190610bd4565b60405180910390f35b3480156101c457600080fd5b506101cd6106c0565b6040516101da9190610bd4565b60405180910390f35b3480156101ef57600080fd5b506101f86106cc565b6040516102059190610bd4565b60405180910390f35b34801561021a57600080fd5b50610223610764565b6040516102309190610dcd565b60405180910390f35b34801561024557600080fd5b5061024e610788565b60405161025b9190610bd4565b60405180910390f35b34801561027057600080fd5b5061028b60048036038101906102869190610a17565b61078e565b6040516102989190610bd4565b60405180910390f35b3480156102ad57600080fd5b506102c860048036038101906102c39190610a17565b6107cc565b005b3480156102d657600080fd5b506102df610838565b6040516102ec9190610bd4565b60405180910390f35b3360008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161461037b576040517f7bea902e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60016002600082825461038e9190610e17565b9250508190555050565b6103a061092f565b60046000838152602001908152602001600020604051806080016040529081600082015481526020016001820180546103d890610e7a565b80601f016020809104026020016040519081016040528092919081815260200182805461040490610e7a565b80156104515780601f1061042657610100808354040283529160200191610451565b820191906000526020600020905b81548152906001019060200180831161043457829003601f168201915b505050505081526020016002820160009054906101000a900460ff1660ff1660ff1681526020016002820160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815250509050919050565b60006104e0600361083e565b905090565b6104ef600361084c565b6040518060800160405280610504600361083e565b81526020018381526020018260ff1681526020013373ffffffffffffffffffffffffffffffffffffffff1681525060046000610540600361083e565b815260200190815260200160002060008201518160000155602082015181600101908161056d9190611057565b5060408201518160020160006101000a81548160ff021916908360ff16021790555060608201518160020160016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509050505050565b600061060a600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16610862565b905090565b600080600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa15801561067f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106a391906111b6565b5050509150506402540be400816106ba9190611231565b91505090565b60038060000154905081565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166354fd4d506040518163ffffffff1660e01b8152600401602060405180830381865afa15801561073b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061075f91906112a9565b905090565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60025481565b60006107c5600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836108f390919063ffffffff16565b9050919050565b600460008281526020019081526020016000206000808201600090556001820160006107f89190610970565b6002820160006101000a81549060ff02191690556002820160016101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055505050565b60015481565b600081600001549050919050565b6001816000016000828254019250508190555050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa1580156108b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108d491906111b6565b5050509150506402540be400816108eb9190611231565b915050919050565b6000806108ff83610862565b90506000670de0b6b3a7640000858361091891906112d6565b6109229190611347565b9050809250505092915050565b60405180608001604052806000815260200160608152602001600060ff168152602001600073ffffffffffffffffffffffffffffffffffffffff1681525090565b50805461097c90610e7a565b6000825580601f1061098e57506109ad565b601f0160209004906000526020600020908101906109ac91906109b0565b5b50565b5b808211156109c95760008160009055506001016109b1565b5090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b6109f4816109e1565b81146109ff57600080fd5b50565b600081359050610a11816109eb565b92915050565b600060208284031215610a2d57610a2c6109d7565b5b6000610a3b84828501610a02565b91505092915050565b610a4d816109e1565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610a8d578082015181840152602081019050610a72565b60008484015250505050565b6000601f19601f8301169050919050565b6000610ab582610a53565b610abf8185610a5e565b9350610acf818560208601610a6f565b610ad881610a99565b840191505092915050565b600060ff82169050919050565b610af981610ae3565b82525050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610b2a82610aff565b9050919050565b610b3a81610b1f565b82525050565b6000608083016000830151610b586000860182610a44565b5060208301518482036020860152610b708282610aaa565b9150506040830151610b856040860182610af0565b506060830151610b986060860182610b31565b508091505092915050565b60006020820190508181036000830152610bbd8184610b40565b905092915050565b610bce816109e1565b82525050565b6000602082019050610be96000830184610bc5565b92915050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610c3182610a99565b810181811067ffffffffffffffff82111715610c5057610c4f610bf9565b5b80604052505050565b6000610c636109cd565b9050610c6f8282610c28565b919050565b600067ffffffffffffffff821115610c8f57610c8e610bf9565b5b610c9882610a99565b9050602081019050919050565b82818337600083830152505050565b6000610cc7610cc284610c74565b610c59565b905082815260208101848484011115610ce357610ce2610bf4565b5b610cee848285610ca5565b509392505050565b600082601f830112610d0b57610d0a610bef565b5b8135610d1b848260208601610cb4565b91505092915050565b610d2d81610ae3565b8114610d3857600080fd5b50565b600081359050610d4a81610d24565b92915050565b60008060408385031215610d6757610d666109d7565b5b600083013567ffffffffffffffff811115610d8557610d846109dc565b5b610d9185828601610cf6565b9250506020610da285828601610d3b565b9150509250929050565b6000610db782610aff565b9050919050565b610dc781610dac565b82525050565b6000602082019050610de26000830184610dbe565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610e22826109e1565b9150610e2d836109e1565b9250828201905080821115610e4557610e44610de8565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680610e9257607f821691505b602082108103610ea557610ea4610e4b565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302610f0d7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82610ed0565b610f178683610ed0565b95508019841693508086168417925050509392505050565b6000819050919050565b6000610f54610f4f610f4a846109e1565b610f2f565b6109e1565b9050919050565b6000819050919050565b610f6e83610f39565b610f82610f7a82610f5b565b848454610edd565b825550505050565b600090565b610f97610f8a565b610fa2818484610f65565b505050565b5b81811015610fc657610fbb600082610f8f565b600181019050610fa8565b5050565b601f82111561100b57610fdc81610eab565b610fe584610ec0565b81016020851015610ff4578190505b61100861100085610ec0565b830182610fa7565b50505b505050565b600082821c905092915050565b600061102e60001984600802611010565b1980831691505092915050565b6000611047838361101d565b9150826002028217905092915050565b61106082610a53565b67ffffffffffffffff81111561107957611078610bf9565b5b6110838254610e7a565b61108e828285610fca565b600060209050601f8311600181146110c157600084156110af578287015190505b6110b9858261103b565b865550611121565b601f1984166110cf86610eab565b60005b828110156110f7578489015182556001820191506020850194506020810190506110d2565b868310156111145784890151611110601f89168261101d565b8355505b6001600288020188555050505b505050505050565b600069ffffffffffffffffffff82169050919050565b61114881611129565b811461115357600080fd5b50565b6000815190506111658161113f565b92915050565b6000819050919050565b61117e8161116b565b811461118957600080fd5b50565b60008151905061119b81611175565b92915050565b6000815190506111b0816109eb565b92915050565b600080600080600060a086880312156111d2576111d16109d7565b5b60006111e088828901611156565b95505060206111f18882890161118c565b9450506040611202888289016111a1565b9350506060611213888289016111a1565b925050608061122488828901611156565b9150509295509295909350565b600061123c8261116b565b91506112478361116b565b92508282026112558161116b565b91507f8000000000000000000000000000000000000000000000000000000000000000841460008412161561128d5761128c610de8565b5b82820584148315176112a2576112a1610de8565b5b5092915050565b6000602082840312156112bf576112be6109d7565b5b60006112cd848285016111a1565b91505092915050565b60006112e1826109e1565b91506112ec836109e1565b92508282026112fa816109e1565b9150828204841483151761131157611310610de8565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000611352826109e1565b915061135d836109e1565b92508261136d5761136c611318565b5b82820490509291505056fea26469706673582212209494d0de660c01ead1f4c15bdcddd0219abc51c14290459d3b03e0ff376a3f1564736f6c63430008120033",
  "deployedBytecode": "0x6080604052600436106100c25760003560e01c806378880f4a1161007f578063b69ef8a811610059578063b69ef8a814610239578063c086381e14610264578063d08c6803146102a1578063f46ca1be146102ca576100c2565b806378880f4a146101b85780638bdc6c16146101e35780638da5cb5b1461020e576100c2565b80631249c58b146100c7578063246982c4146100d15780632b4ae7bd1461010e5780635332a4d9146101395780636c2169ea1461016257806372142a451461018d575b600080fd5b6100cf6102f5565b005b3480156100dd57600080fd5b506100f860048036038101906100f39190610a17565b610398565b6040516101059190610ba3565b60405180910390f35b34801561011a57600080fd5b506101236104d4565b6040516101309190610bd4565b60405180910390f35b34801561014557600080fd5b50610160600480360381019061015b9190610d50565b6104e5565b005b34801561016e57600080fd5b506101776105dd565b6040516101849190610bd4565b60405180910390f35b34801561019957600080fd5b506101a261060f565b6040516101af9190610bd4565b60405180910390f35b3480156101c457600080fd5b506101cd6106c0565b6040516101da9190610bd4565b60405180910390f35b3480156101ef57600080fd5b506101f86106cc565b6040516102059190610bd4565b60405180910390f35b34801561021a57600080fd5b50610223610764565b6040516102309190610dcd565b60405180910390f35b34801561024557600080fd5b5061024e610788565b60405161025b9190610bd4565b60405180910390f35b34801561027057600080fd5b5061028b60048036038101906102869190610a17565b61078e565b6040516102989190610bd4565b60405180910390f35b3480156102ad57600080fd5b506102c860048036038101906102c39190610a17565b6107cc565b005b3480156102d657600080fd5b506102df610838565b6040516102ec9190610bd4565b60405180910390f35b3360008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161461037b576040517f7bea902e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60016002600082825461038e9190610e17565b9250508190555050565b6103a061092f565b60046000838152602001908152602001600020604051806080016040529081600082015481526020016001820180546103d890610e7a565b80601f016020809104026020016040519081016040528092919081815260200182805461040490610e7a565b80156104515780601f1061042657610100808354040283529160200191610451565b820191906000526020600020905b81548152906001019060200180831161043457829003601f168201915b505050505081526020016002820160009054906101000a900460ff1660ff1660ff1681526020016002820160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815250509050919050565b60006104e0600361083e565b905090565b6104ef600361084c565b6040518060800160405280610504600361083e565b81526020018381526020018260ff1681526020013373ffffffffffffffffffffffffffffffffffffffff1681525060046000610540600361083e565b815260200190815260200160002060008201518160000155602082015181600101908161056d9190611057565b5060408201518160020160006101000a81548160ff021916908360ff16021790555060608201518160020160016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509050505050565b600061060a600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16610862565b905090565b600080600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa15801561067f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106a391906111b6565b5050509150506402540be400816106ba9190611231565b91505090565b60038060000154905081565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166354fd4d506040518163ffffffff1660e01b8152600401602060405180830381865afa15801561073b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061075f91906112a9565b905090565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60025481565b60006107c5600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836108f390919063ffffffff16565b9050919050565b600460008281526020019081526020016000206000808201600090556001820160006107f89190610970565b6002820160006101000a81549060ff02191690556002820160016101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055505050565b60015481565b600081600001549050919050565b6001816000016000828254019250508190555050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa1580156108b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108d491906111b6565b5050509150506402540be400816108eb9190611231565b915050919050565b6000806108ff83610862565b90506000670de0b6b3a7640000858361091891906112d6565b6109229190611347565b9050809250505092915050565b60405180608001604052806000815260200160608152602001600060ff168152602001600073ffffffffffffffffffffffffffffffffffffffff1681525090565b50805461097c90610e7a565b6000825580601f1061098e57506109ad565b601f0160209004906000526020600020908101906109ac91906109b0565b5b50565b5b808211156109c95760008160009055506001016109b1565b5090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b6109f4816109e1565b81146109ff57600080fd5b50565b600081359050610a11816109eb565b92915050565b600060208284031215610a2d57610a2c6109d7565b5b6000610a3b84828501610a02565b91505092915050565b610a4d816109e1565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610a8d578082015181840152602081019050610a72565b60008484015250505050565b6000601f19601f8301169050919050565b6000610ab582610a53565b610abf8185610a5e565b9350610acf818560208601610a6f565b610ad881610a99565b840191505092915050565b600060ff82169050919050565b610af981610ae3565b82525050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610b2a82610aff565b9050919050565b610b3a81610b1f565b82525050565b6000608083016000830151610b586000860182610a44565b5060208301518482036020860152610b708282610aaa565b9150506040830151610b856040860182610af0565b506060830151610b986060860182610b31565b508091505092915050565b60006020820190508181036000830152610bbd8184610b40565b905092915050565b610bce816109e1565b82525050565b6000602082019050610be96000830184610bc5565b92915050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610c3182610a99565b810181811067ffffffffffffffff82111715610c5057610c4f610bf9565b5b80604052505050565b6000610c636109cd565b9050610c6f8282610c28565b919050565b600067ffffffffffffffff821115610c8f57610c8e610bf9565b5b610c9882610a99565b9050602081019050919050565b82818337600083830152505050565b6000610cc7610cc284610c74565b610c59565b905082815260208101848484011115610ce357610ce2610bf4565b5b610cee848285610ca5565b509392505050565b600082601f830112610d0b57610d0a610bef565b5b8135610d1b848260208601610cb4565b91505092915050565b610d2d81610ae3565b8114610d3857600080fd5b50565b600081359050610d4a81610d24565b92915050565b60008060408385031215610d6757610d666109d7565b5b600083013567ffffffffffffffff811115610d8557610d846109dc565b5b610d9185828601610cf6565b9250506020610da285828601610d3b565b9150509250929050565b6000610db782610aff565b9050919050565b610dc781610dac565b82525050565b6000602082019050610de26000830184610dbe565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610e22826109e1565b9150610e2d836109e1565b9250828201905080821115610e4557610e44610de8565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680610e9257607f821691505b602082108103610ea557610ea4610e4b565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302610f0d7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82610ed0565b610f178683610ed0565b95508019841693508086168417925050509392505050565b6000819050919050565b6000610f54610f4f610f4a846109e1565b610f2f565b6109e1565b9050919050565b6000819050919050565b610f6e83610f39565b610f82610f7a82610f5b565b848454610edd565b825550505050565b600090565b610f97610f8a565b610fa2818484610f65565b505050565b5b81811015610fc657610fbb600082610f8f565b600181019050610fa8565b5050565b601f82111561100b57610fdc81610eab565b610fe584610ec0565b81016020851015610ff4578190505b61100861100085610ec0565b830182610fa7565b50505b505050565b600082821c905092915050565b600061102e60001984600802611010565b1980831691505092915050565b6000611047838361101d565b9150826002028217905092915050565b61106082610a53565b67ffffffffffffffff81111561107957611078610bf9565b5b6110838254610e7a565b61108e828285610fca565b600060209050601f8311600181146110c157600084156110af578287015190505b6110b9858261103b565b865550611121565b601f1984166110cf86610eab565b60005b828110156110f7578489015182556001820191506020850194506020810190506110d2565b868310156111145784890151611110601f89168261101d565b8355505b6001600288020188555050505b505050505050565b600069ffffffffffffffffffff82169050919050565b61114881611129565b811461115357600080fd5b50565b6000815190506111658161113f565b92915050565b6000819050919050565b61117e8161116b565b811461118957600080fd5b50565b60008151905061119b81611175565b92915050565b6000815190506111b0816109eb565b92915050565b600080600080600060a086880312156111d2576111d16109d7565b5b60006111e088828901611156565b95505060206111f18882890161118c565b9450506040611202888289016111a1565b9350506060611213888289016111a1565b925050608061122488828901611156565b9150509295509295909350565b600061123c8261116b565b91506112478361116b565b92508282026112558161116b565b91507f8000000000000000000000000000000000000000000000000000000000000000841460008412161561128d5761128c610de8565b5b82820584148315176112a2576112a1610de8565b5b5092915050565b6000602082840312156112bf576112be6109d7565b5b60006112cd848285016111a1565b91505092915050565b60006112e1826109e1565b91506112ec836109e1565b92508282026112fa816109e1565b9150828204841483151761131157611310610de8565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000611352826109e1565b915061135d836109e1565b92508261136d5761136c611318565b5b82820490509291505056fea26469706673582212209494d0de660c01ead1f4c15bdcddd0219abc51c14290459d3b03e0ff376a3f1564736f6c63430008120033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 454,
        "contract": "contracts/test.sol:test",
        "label": "owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 456,
        "contract": "contracts/test.sol:test",
        "label": "i_initialSupply",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 458,
        "contract": "contracts/test.sol:test",
        "label": "balance",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 461,
        "contract": "contracts/test.sol:test",
        "label": "population",
        "offset": 0,
        "slot": "3",
        "type": "t_struct(Counter)314_storage"
      },
      {
        "astId": 466,
        "contract": "contracts/test.sol:test",
        "label": "people",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_struct(Person)478_storage)"
      },
      {
        "astId": 469,
        "contract": "contracts/test.sol:test",
        "label": "s_priceFeed",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(AggregatorV3Interface)102"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_contract(AggregatorV3Interface)102": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_uint256,t_struct(Person)478_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct test.Person)",
        "numberOfBytes": "32",
        "value": "t_struct(Person)478_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Counter)314_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 313,
            "contract": "contracts/test.sol:test",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Person)478_storage": {
        "encoding": "inplace",
        "label": "struct test.Person",
        "members": [
          {
            "astId": 471,
            "contract": "contracts/test.sol:test",
            "label": "_id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 473,
            "contract": "contracts/test.sol:test",
            "label": "_name",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 475,
            "contract": "contracts/test.sol:test",
            "label": "_age",
            "offset": 0,
            "slot": "2",
            "type": "t_uint8"
          },
          {
            "astId": 477,
            "contract": "contracts/test.sol:test",
            "label": "_wallet",
            "offset": 1,
            "slot": "2",
            "type": "t_address_payable"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}