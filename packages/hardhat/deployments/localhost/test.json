{
  "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_inititialSupply",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_priceFeed",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "test__NotOwner",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "whoever",
          "type": "address"
        }
      ],
      "name": "SomeEvent",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "balance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "convertEthToUsd",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "n",
          "type": "uint256"
        }
      ],
      "name": "getPerson",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "_id",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "_name",
              "type": "string"
            },
            {
              "internalType": "uint8",
              "name": "_age",
              "type": "uint8"
            },
            {
              "internalType": "address payable",
              "name": "_wallet",
              "type": "address"
            }
          ],
          "internalType": "struct test.Person",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPopulation",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPriceFromConverter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRoundData",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "i_initialSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mint",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "uint8",
          "name": "_age",
          "type": "uint8"
        }
      ],
      "name": "newPerson",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "population",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "testAggregator",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x648816325c520fba63c9562cbaf53b1daa968c2b1251404648e8ceae5202f22a",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "transactionIndex": 0,
    "gasUsed": "1222738",
    "logsBloom": "0x
    "blockHash": "0x49ccafc2c5258aa751c79dba6b98f137b7045ec7c9155f5636e4202486605263",
    "transactionHash": "0x648816325c520fba63c9562cbaf53b1daa968c2b1251404648e8ceae5202f22a",
    "logs": [],
    "blockNumber": 2,
    "cumulativeGasUsed": "1222738",
    "status": 1,
    "byzantium": true
  },
  "args": [
    25,
    "0x5FbDB2315678afecb367f032d93F642f64180aa3"
  ],
  "numDeployments": 1,
  "solcInputHash": "8ec2cfc29c5e539a2cead5a9bbd9cdc6",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_inititialSupply\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_priceFeed\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"test__NotOwner\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"whoever\",\"type\":\"address\"}],\"name\":\"SomeEvent\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"balance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"convertEthToUsd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"n\",\"type\":\"uint256\"}],\"name\":\"getPerson\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"_age\",\"type\":\"uint8\"},{\"internalType\":\"address payable\",\"name\":\"_wallet\",\"type\":\"address\"}],\"internalType\":\"struct test.Person\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPopulation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceFromConverter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRoundData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"i_initialSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"_age\",\"type\":\"uint8\"}],\"name\":\"newPerson\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"population\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"testAggregator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/test.sol\":\"test\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0x6e6e4b0835904509406b070ee173b5bc8f677c19421b76be38aea3b1b3d30846\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"contracts/PriceConverter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.18;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\nlibrary PriceConverter {\\n    function getPrice(\\n        AggregatorV3Interface priceFeed\\n    ) internal view returns (uint256) {\\n        (, int256 result, , , ) = priceFeed.latestRoundData();\\n        return uint256(result * 10000000000); // the rate is in decimals=18.  we are working with 8.  add 10 zeros\\n    }\\n\\n    function getConversionRate(\\n        uint256 ethAmount,\\n        AggregatorV3Interface priceFeed\\n    ) internal view returns (uint256) {\\n        uint256 ethPrice = getPrice(priceFeed);\\n        uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1000000000000000000;\\n        return ethAmountInUsd;\\n    }\\n}\\n\",\"keccak256\":\"0xbe223c96ee9afc732fbd489b91431d8137605d6eb3ba1f439d2c3b406276daaa\",\"license\":\"MIT\"},\"contracts/test.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.18;\\n\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"./PriceConverter.sol\\\";\\n\\nerror test__SomeError();\\nerror test__NotOwner();\\n\\ncontract test {\\n    using Counters for Counters.Counter;\\n    using PriceConverter for uint256;\\n\\n    address public owner;\\n    uint256 public i_initialSupply;\\n    uint256 public balance;\\n    Counters.Counter public population;\\n    mapping(uint256 => Person) people;\\n    AggregatorV3Interface private s_priceFeed;\\n\\n    struct Person {\\n        uint256 _id;\\n        string _name;\\n        uint8 _age;\\n        address payable _wallet;\\n    }\\n\\n    event SomeEvent(address indexed whoever);\\n\\n    modifier isOwner(address who) {\\n        if (who != owner) {\\n            revert test__NotOwner();\\n        }\\n        _;\\n    }\\n\\n    constructor(uint256 _inititialSupply, address _priceFeed) {\\n        owner = msg.sender;\\n        i_initialSupply = _inititialSupply;\\n        balance = 0;\\n        people[0] = Person(\\n            population.current(),\\n            \\\"Ross\\\",\\n            32,\\n            payable(msg.sender)\\n        );\\n        s_priceFeed = AggregatorV3Interface(_priceFeed);\\n    }\\n\\n    function mint() public payable isOwner(msg.sender) {\\n        balance += 1;\\n    }\\n\\n    function newPerson(string memory _name, uint8 _age) public {\\n        population.increment();\\n        people[population.current()] = Person(\\n            population.current(),\\n            _name,\\n            _age,\\n            payable(msg.sender)\\n        );\\n    }\\n\\n    function getPerson(uint256 n) public view returns (Person memory) {\\n        \\n        return people[n];\\n    }\\n\\n    function getPopulation() public view returns (uint256) {\\n        return population.current();\\n    }\\n\\n    function convertEthToUsd(uint256 _amount) public view returns (uint256) {\\n        return _amount.getConversionRate(s_priceFeed);\\n    }\\n\\n    function getPriceFromConverter() public view returns (uint256) {\\n        return PriceConverter.getPrice(s_priceFeed);\\n    }\\n\\n    // meaningless tests\\n    function testAggregator() public view returns (uint256) {\\n        return s_priceFeed.version();\\n    }\\n\\n    function getRoundData() public view returns (uint256) {\\n        (, int256 result, , , ) = s_priceFeed.latestRoundData();\\n        return uint256(result * 10000000000);\\n    }\\n}\\n\",\"keccak256\":\"0x60a33dbb6cdf6ad13fbdbaafa553bdf14524464f7d88cfaf9a88bf28c7a7606b\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620018f7380380620018f78339818101604052810190620000379190620002a8565b336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508160018190555060006002819055506040518060800160405280620000a86003620001f560201b6200078e1760201c565b81526020016040518060400160405280600481526020017f526f7373000000000000000000000000000000000000000000000000000000008152508152602001602060ff1681526020013373ffffffffffffffffffffffffffffffffffffffff16815250600460008081526020019081526020016000206000820151816000015560208201518160010190816200014091906200055f565b5060408201518160020160006101000a81548160ff021916908360ff16021790555060608201518160020160016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555090505080600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505062000646565b600081600001549050919050565b600080fd5b6000819050919050565b6200021d8162000208565b81146200022957600080fd5b50565b6000815190506200023d8162000212565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620002708262000243565b9050919050565b620002828162000263565b81146200028e57600080fd5b50565b600081519050620002a28162000277565b92915050565b60008060408385031215620002c257620002c162000203565b5b6000620002d2858286016200022c565b9250506020620002e58582860162000291565b9150509250929050565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200037157607f821691505b60208210810362000387576200038662000329565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302620003f17fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82620003b2565b620003fd8683620003b2565b95508019841693508086168417925050509392505050565b6000819050919050565b6000620004406200043a620004348462000208565b62000415565b62000208565b9050919050565b6000819050919050565b6200045c836200041f565b620004746200046b8262000447565b848454620003bf565b825550505050565b600090565b6200048b6200047c565b6200049881848462000451565b505050565b5b81811015620004c057620004b460008262000481565b6001810190506200049e565b5050565b601f8211156200050f57620004d9816200038d565b620004e484620003a2565b81016020851015620004f4578190505b6200050c6200050385620003a2565b8301826200049d565b50505b505050565b600082821c905092915050565b6000620005346000198460080262000514565b1980831691505092915050565b60006200054f838362000521565b9150826002028217905092915050565b6200056a82620002ef565b67ffffffffffffffff811115620005865762000585620002fa565b5b62000592825462000358565b6200059f828285620004c4565b600060209050601f831160018114620005d75760008415620005c2578287015190505b620005ce858262000541565b8655506200063e565b601f198416620005e7866200038d565b60005b828110156200061157848901518255600182019150602085019450602081019050620005ea565b868310156200063157848901516200062d601f89168262000521565b8355505b6001600288020188555050505b505050505050565b6112a180620006566000396000f3fe6080604052600436106100a75760003560e01c806378880f4a1161006457806378880f4a1461019d5780638bdc6c16146101c85780638da5cb5b146101f3578063b69ef8a81461021e578063c086381e14610249578063f46ca1be14610286576100a7565b80631249c58b146100ac578063246982c4146100b65780632b4ae7bd146100f35780635332a4d91461011e5780636c2169ea1461014757806372142a4514610172575b600080fd5b6100b46102b1565b005b3480156100c257600080fd5b506100dd60048036038101906100d8919061090a565b610354565b6040516100ea9190610a96565b60405180910390f35b3480156100ff57600080fd5b50610108610490565b6040516101159190610ac7565b60405180910390f35b34801561012a57600080fd5b5061014560048036038101906101409190610c43565b6104a1565b005b34801561015357600080fd5b5061015c610599565b6040516101699190610ac7565b60405180910390f35b34801561017e57600080fd5b506101876105cb565b6040516101949190610ac7565b60405180910390f35b3480156101a957600080fd5b506101b261067c565b6040516101bf9190610ac7565b60405180910390f35b3480156101d457600080fd5b506101dd610688565b6040516101ea9190610ac7565b60405180910390f35b3480156101ff57600080fd5b50610208610720565b6040516102159190610cc0565b60405180910390f35b34801561022a57600080fd5b50610233610744565b6040516102409190610ac7565b60405180910390f35b34801561025557600080fd5b50610270600480360381019061026b919061090a565b61074a565b60405161027d9190610ac7565b60405180910390f35b34801561029257600080fd5b5061029b610788565b6040516102a89190610ac7565b60405180910390f35b3360008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610337576040517f7bea902e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60016002600082825461034a9190610d0a565b9250508190555050565b61035c61087f565b600460008381526020019081526020016000206040518060800160405290816000820154815260200160018201805461039490610d6d565b80601f01602080910402602001604051908101604052809291908181526020018280546103c090610d6d565b801561040d5780601f106103e25761010080835404028352916020019161040d565b820191906000526020600020905b8154815290600101906020018083116103f057829003601f168201915b505050505081526020016002820160009054906101000a900460ff1660ff1660ff1681526020016002820160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815250509050919050565b600061049c600361078e565b905090565b6104ab600361079c565b60405180608001604052806104c0600361078e565b81526020018381526020018260ff1681526020013373ffffffffffffffffffffffffffffffffffffffff16815250600460006104fc600361078e565b81526020019081526020016000206000820151816000015560208201518160010190816105299190610f4a565b5060408201518160020160006101000a81548160ff021916908360ff16021790555060608201518160020160016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509050505050565b60006105c6600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166107b2565b905090565b600080600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa15801561063b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061065f91906110a9565b5050509150506402540be400816106769190611124565b91505090565b60038060000154905081565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166354fd4d506040518163ffffffff1660e01b8152600401602060405180830381865afa1580156106f7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061071b919061119c565b905090565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60025481565b6000610781600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168361084390919063ffffffff16565b9050919050565b60015481565b600081600001549050919050565b6001816000016000828254019250508190555050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa158015610800573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061082491906110a9565b5050509150506402540be4008161083b9190611124565b915050919050565b60008061084f836107b2565b90506000670de0b6b3a7640000858361086891906111c9565b610872919061123a565b9050809250505092915050565b60405180608001604052806000815260200160608152602001600060ff168152602001600073ffffffffffffffffffffffffffffffffffffffff1681525090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b6108e7816108d4565b81146108f257600080fd5b50565b600081359050610904816108de565b92915050565b6000602082840312156109205761091f6108ca565b5b600061092e848285016108f5565b91505092915050565b610940816108d4565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610980578082015181840152602081019050610965565b60008484015250505050565b6000601f19601f8301169050919050565b60006109a882610946565b6109b28185610951565b93506109c2818560208601610962565b6109cb8161098c565b840191505092915050565b600060ff82169050919050565b6109ec816109d6565b82525050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610a1d826109f2565b9050919050565b610a2d81610a12565b82525050565b6000608083016000830151610a4b6000860182610937565b5060208301518482036020860152610a63828261099d565b9150506040830151610a7860408601826109e3565b506060830151610a8b6060860182610a24565b508091505092915050565b60006020820190508181036000830152610ab08184610a33565b905092915050565b610ac1816108d4565b82525050565b6000602082019050610adc6000830184610ab8565b92915050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610b248261098c565b810181811067ffffffffffffffff82111715610b4357610b42610aec565b5b80604052505050565b6000610b566108c0565b9050610b628282610b1b565b919050565b600067ffffffffffffffff821115610b8257610b81610aec565b5b610b8b8261098c565b9050602081019050919050565b82818337600083830152505050565b6000610bba610bb584610b67565b610b4c565b905082815260208101848484011115610bd657610bd5610ae7565b5b610be1848285610b98565b509392505050565b600082601f830112610bfe57610bfd610ae2565b5b8135610c0e848260208601610ba7565b91505092915050565b610c20816109d6565b8114610c2b57600080fd5b50565b600081359050610c3d81610c17565b92915050565b60008060408385031215610c5a57610c596108ca565b5b600083013567ffffffffffffffff811115610c7857610c776108cf565b5b610c8485828601610be9565b9250506020610c9585828601610c2e565b9150509250929050565b6000610caa826109f2565b9050919050565b610cba81610c9f565b82525050565b6000602082019050610cd56000830184610cb1565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610d15826108d4565b9150610d20836108d4565b9250828201905080821115610d3857610d37610cdb565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680610d8557607f821691505b602082108103610d9857610d97610d3e565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302610e007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82610dc3565b610e0a8683610dc3565b95508019841693508086168417925050509392505050565b6000819050919050565b6000610e47610e42610e3d846108d4565b610e22565b6108d4565b9050919050565b6000819050919050565b610e6183610e2c565b610e75610e6d82610e4e565b848454610dd0565b825550505050565b600090565b610e8a610e7d565b610e95818484610e58565b505050565b5b81811015610eb957610eae600082610e82565b600181019050610e9b565b5050565b601f821115610efe57610ecf81610d9e565b610ed884610db3565b81016020851015610ee7578190505b610efb610ef385610db3565b830182610e9a565b50505b505050565b600082821c905092915050565b6000610f2160001984600802610f03565b1980831691505092915050565b6000610f3a8383610f10565b9150826002028217905092915050565b610f5382610946565b67ffffffffffffffff811115610f6c57610f6b610aec565b5b610f768254610d6d565b610f81828285610ebd565b600060209050601f831160018114610fb45760008415610fa2578287015190505b610fac8582610f2e565b865550611014565b601f198416610fc286610d9e565b60005b82811015610fea57848901518255600182019150602085019450602081019050610fc5565b868310156110075784890151611003601f891682610f10565b8355505b6001600288020188555050505b505050505050565b600069ffffffffffffffffffff82169050919050565b61103b8161101c565b811461104657600080fd5b50565b60008151905061105881611032565b92915050565b6000819050919050565b6110718161105e565b811461107c57600080fd5b50565b60008151905061108e81611068565b92915050565b6000815190506110a3816108de565b92915050565b600080600080600060a086880312156110c5576110c46108ca565b5b60006110d388828901611049565b95505060206110e48882890161107f565b94505060406110f588828901611094565b935050606061110688828901611094565b925050608061111788828901611049565b9150509295509295909350565b600061112f8261105e565b915061113a8361105e565b92508282026111488161105e565b91507f800000000000000000000000000000000000000000000000000000000000000084146000841216156111805761117f610cdb565b5b828205841483151761119557611194610cdb565b5b5092915050565b6000602082840312156111b2576111b16108ca565b5b60006111c084828501611094565b91505092915050565b60006111d4826108d4565b91506111df836108d4565b92508282026111ed816108d4565b9150828204841483151761120457611203610cdb565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000611245826108d4565b9150611250836108d4565b9250826112605761125f61120b565b5b82820490509291505056fea2646970667358221220be56e679628cda6c910bde850034744066d53b0d03de31a10c7d36a7884a017764736f6c63430008120033",
  "deployedBytecode": "0x6080604052600436106100a75760003560e01c806378880f4a1161006457806378880f4a1461019d5780638bdc6c16146101c85780638da5cb5b146101f3578063b69ef8a81461021e578063c086381e14610249578063f46ca1be14610286576100a7565b80631249c58b146100ac578063246982c4146100b65780632b4ae7bd146100f35780635332a4d91461011e5780636c2169ea1461014757806372142a4514610172575b600080fd5b6100b46102b1565b005b3480156100c257600080fd5b506100dd60048036038101906100d8919061090a565b610354565b6040516100ea9190610a96565b60405180910390f35b3480156100ff57600080fd5b50610108610490565b6040516101159190610ac7565b60405180910390f35b34801561012a57600080fd5b5061014560048036038101906101409190610c43565b6104a1565b005b34801561015357600080fd5b5061015c610599565b6040516101699190610ac7565b60405180910390f35b34801561017e57600080fd5b506101876105cb565b6040516101949190610ac7565b60405180910390f35b3480156101a957600080fd5b506101b261067c565b6040516101bf9190610ac7565b60405180910390f35b3480156101d457600080fd5b506101dd610688565b6040516101ea9190610ac7565b60405180910390f35b3480156101ff57600080fd5b50610208610720565b6040516102159190610cc0565b60405180910390f35b34801561022a57600080fd5b50610233610744565b6040516102409190610ac7565b60405180910390f35b34801561025557600080fd5b50610270600480360381019061026b919061090a565b61074a565b60405161027d9190610ac7565b60405180910390f35b34801561029257600080fd5b5061029b610788565b6040516102a89190610ac7565b60405180910390f35b3360008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610337576040517f7bea902e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60016002600082825461034a9190610d0a565b9250508190555050565b61035c61087f565b600460008381526020019081526020016000206040518060800160405290816000820154815260200160018201805461039490610d6d565b80601f01602080910402602001604051908101604052809291908181526020018280546103c090610d6d565b801561040d5780601f106103e25761010080835404028352916020019161040d565b820191906000526020600020905b8154815290600101906020018083116103f057829003601f168201915b505050505081526020016002820160009054906101000a900460ff1660ff1660ff1681526020016002820160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815250509050919050565b600061049c600361078e565b905090565b6104ab600361079c565b60405180608001604052806104c0600361078e565b81526020018381526020018260ff1681526020013373ffffffffffffffffffffffffffffffffffffffff16815250600460006104fc600361078e565b81526020019081526020016000206000820151816000015560208201518160010190816105299190610f4a565b5060408201518160020160006101000a81548160ff021916908360ff16021790555060608201518160020160016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509050505050565b60006105c6600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166107b2565b905090565b600080600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa15801561063b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061065f91906110a9565b5050509150506402540be400816106769190611124565b91505090565b60038060000154905081565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166354fd4d506040518163ffffffff1660e01b8152600401602060405180830381865afa1580156106f7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061071b919061119c565b905090565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60025481565b6000610781600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168361084390919063ffffffff16565b9050919050565b60015481565b600081600001549050919050565b6001816000016000828254019250508190555050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa158015610800573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061082491906110a9565b5050509150506402540be4008161083b9190611124565b915050919050565b60008061084f836107b2565b90506000670de0b6b3a7640000858361086891906111c9565b610872919061123a565b9050809250505092915050565b60405180608001604052806000815260200160608152602001600060ff168152602001600073ffffffffffffffffffffffffffffffffffffffff1681525090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b6108e7816108d4565b81146108f257600080fd5b50565b600081359050610904816108de565b92915050565b6000602082840312156109205761091f6108ca565b5b600061092e848285016108f5565b91505092915050565b610940816108d4565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610980578082015181840152602081019050610965565b60008484015250505050565b6000601f19601f8301169050919050565b60006109a882610946565b6109b28185610951565b93506109c2818560208601610962565b6109cb8161098c565b840191505092915050565b600060ff82169050919050565b6109ec816109d6565b82525050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610a1d826109f2565b9050919050565b610a2d81610a12565b82525050565b6000608083016000830151610a4b6000860182610937565b5060208301518482036020860152610a63828261099d565b9150506040830151610a7860408601826109e3565b506060830151610a8b6060860182610a24565b508091505092915050565b60006020820190508181036000830152610ab08184610a33565b905092915050565b610ac1816108d4565b82525050565b6000602082019050610adc6000830184610ab8565b92915050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610b248261098c565b810181811067ffffffffffffffff82111715610b4357610b42610aec565b5b80604052505050565b6000610b566108c0565b9050610b628282610b1b565b919050565b600067ffffffffffffffff821115610b8257610b81610aec565b5b610b8b8261098c565b9050602081019050919050565b82818337600083830152505050565b6000610bba610bb584610b67565b610b4c565b905082815260208101848484011115610bd657610bd5610ae7565b5b610be1848285610b98565b509392505050565b600082601f830112610bfe57610bfd610ae2565b5b8135610c0e848260208601610ba7565b91505092915050565b610c20816109d6565b8114610c2b57600080fd5b50565b600081359050610c3d81610c17565b92915050565b60008060408385031215610c5a57610c596108ca565b5b600083013567ffffffffffffffff811115610c7857610c776108cf565b5b610c8485828601610be9565b9250506020610c9585828601610c2e565b9150509250929050565b6000610caa826109f2565b9050919050565b610cba81610c9f565b82525050565b6000602082019050610cd56000830184610cb1565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610d15826108d4565b9150610d20836108d4565b9250828201905080821115610d3857610d37610cdb565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680610d8557607f821691505b602082108103610d9857610d97610d3e565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302610e007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82610dc3565b610e0a8683610dc3565b95508019841693508086168417925050509392505050565b6000819050919050565b6000610e47610e42610e3d846108d4565b610e22565b6108d4565b9050919050565b6000819050919050565b610e6183610e2c565b610e75610e6d82610e4e565b848454610dd0565b825550505050565b600090565b610e8a610e7d565b610e95818484610e58565b505050565b5b81811015610eb957610eae600082610e82565b600181019050610e9b565b5050565b601f821115610efe57610ecf81610d9e565b610ed884610db3565b81016020851015610ee7578190505b610efb610ef385610db3565b830182610e9a565b50505b505050565b600082821c905092915050565b6000610f2160001984600802610f03565b1980831691505092915050565b6000610f3a8383610f10565b9150826002028217905092915050565b610f5382610946565b67ffffffffffffffff811115610f6c57610f6b610aec565b5b610f768254610d6d565b610f81828285610ebd565b600060209050601f831160018114610fb45760008415610fa2578287015190505b610fac8582610f2e565b865550611014565b601f198416610fc286610d9e565b60005b82811015610fea57848901518255600182019150602085019450602081019050610fc5565b868310156110075784890151611003601f891682610f10565b8355505b6001600288020188555050505b505050505050565b600069ffffffffffffffffffff82169050919050565b61103b8161101c565b811461104657600080fd5b50565b60008151905061105881611032565b92915050565b6000819050919050565b6110718161105e565b811461107c57600080fd5b50565b60008151905061108e81611068565b92915050565b6000815190506110a3816108de565b92915050565b600080600080600060a086880312156110c5576110c46108ca565b5b60006110d388828901611049565b95505060206110e48882890161107f565b94505060406110f588828901611094565b935050606061110688828901611094565b925050608061111788828901611049565b9150509295509295909350565b600061112f8261105e565b915061113a8361105e565b92508282026111488161105e565b91507f800000000000000000000000000000000000000000000000000000000000000084146000841216156111805761117f610cdb565b5b828205841483151761119557611194610cdb565b5b5092915050565b6000602082840312156111b2576111b16108ca565b5b60006111c084828501611094565b91505092915050565b60006111d4826108d4565b91506111df836108d4565b92508282026111ed816108d4565b9150828204841483151761120457611203610cdb565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000611245826108d4565b9150611250836108d4565b9250826112605761125f61120b565b5b82820490509291505056fea2646970667358221220be56e679628cda6c910bde850034744066d53b0d03de31a10c7d36a7884a017764736f6c63430008120033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 454,
        "contract": "contracts/test.sol:test",
        "label": "owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 456,
        "contract": "contracts/test.sol:test",
        "label": "i_initialSupply",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 458,
        "contract": "contracts/test.sol:test",
        "label": "balance",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 461,
        "contract": "contracts/test.sol:test",
        "label": "population",
        "offset": 0,
        "slot": "3",
        "type": "t_struct(Counter)314_storage"
      },
      {
        "astId": 466,
        "contract": "contracts/test.sol:test",
        "label": "people",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_struct(Person)478_storage)"
      },
      {
        "astId": 469,
        "contract": "contracts/test.sol:test",
        "label": "s_priceFeed",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(AggregatorV3Interface)102"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_contract(AggregatorV3Interface)102": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_uint256,t_struct(Person)478_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct test.Person)",
        "numberOfBytes": "32",
        "value": "t_struct(Person)478_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Counter)314_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 313,
            "contract": "contracts/test.sol:test",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Person)478_storage": {
        "encoding": "inplace",
        "label": "struct test.Person",
        "members": [
          {
            "astId": 471,
            "contract": "contracts/test.sol:test",
            "label": "_id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 473,
            "contract": "contracts/test.sol:test",
            "label": "_name",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 475,
            "contract": "contracts/test.sol:test",
            "label": "_age",
            "offset": 0,
            "slot": "2",
            "type": "t_uint8"
          },
          {
            "astId": 477,
            "contract": "contracts/test.sol:test",
            "label": "_wallet",
            "offset": 1,
            "slot": "2",
            "type": "t_address_payable"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}