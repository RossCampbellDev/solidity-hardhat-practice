{
  "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_inititialSupply",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "balance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "n",
          "type": "uint256"
        }
      ],
      "name": "getPerson",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "_id",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "_name",
              "type": "string"
            },
            {
              "internalType": "uint8",
              "name": "_age",
              "type": "uint8"
            },
            {
              "internalType": "address payable",
              "name": "_wallet",
              "type": "address"
            }
          ],
          "internalType": "struct test.Person",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPopulation",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "i_initialSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mint",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "uint8",
          "name": "_age",
          "type": "uint8"
        }
      ],
      "name": "newPerson",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "population",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x2980f5b9d2c2f26802c44e1d36059b4fac39b69e5aad4bc8e4a393bb8a6a2517",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "transactionIndex": 0,
    "gasUsed": "851556",
    "logsBloom": "0x
    "blockHash": "0x5a5ed7ded40511ccaacfffdcf083267ec7160558c1d7db1c843c2433010e9802",
    "transactionHash": "0x2980f5b9d2c2f26802c44e1d36059b4fac39b69e5aad4bc8e4a393bb8a6a2517",
    "logs": [],
    "blockNumber": 2,
    "cumulativeGasUsed": "851556",
    "status": 1,
    "byzantium": true
  },
  "args": [
    25
  ],
  "numDeployments": 2,
  "solcInputHash": "607bad16368ce22e1eea5df7dbf988ee",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_inititialSupply\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"balance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"n\",\"type\":\"uint256\"}],\"name\":\"getPerson\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"_age\",\"type\":\"uint8\"},{\"internalType\":\"address payable\",\"name\":\"_wallet\",\"type\":\"address\"}],\"internalType\":\"struct test.Person\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPopulation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"i_initialSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"_age\",\"type\":\"uint8\"}],\"name\":\"newPerson\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"population\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/test.sol\":\"test\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"contracts/test.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.18;\\n\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\n\\ncontract test {\\n    using Counters for Counters.Counter;\\n\\n    address public owner;\\n    uint256 public i_initialSupply;\\n    uint256 public balance;\\n    Counters.Counter public population;\\n    mapping(uint256 => Person) people;\\n\\n    struct Person {\\n        uint256 _id;\\n        string _name;\\n        uint8 _age;\\n        address payable _wallet;\\n    }\\n\\n    constructor(uint256 _inititialSupply) {\\n        owner = msg.sender;\\n        i_initialSupply = _inititialSupply;\\n        balance = 0;\\n        people[0] = Person(\\n            population.current(),\\n            \\\"Ross\\\",\\n            32,\\n            payable(msg.sender)\\n        );\\n    }\\n\\n    function mint() public payable {\\n        balance += 1;\\n    }\\n\\n    function newPerson(string memory _name, uint8 _age) public {\\n        population.increment();\\n        people[population.current()] = Person(\\n            population.current(),\\n            _name,\\n            _age,\\n            payable(msg.sender)\\n        );\\n    }\\n\\n    function getPerson(uint256 n) public view returns (Person memory) {\\n        return people[n];\\n    }\\n\\n    function getPopulation() public view returns (uint256) {\\n        return population.current();\\n    }\\n}\\n\",\"keccak256\":\"0x953e9550f3d4ea486daab70bce53d313187459dce752ab1de869a631ca310ba2\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620011f5380380620011f5833981810160405281019062000037919062000201565b336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508060018190555060006002819055506040518060800160405280620000a86003620001b360201b620004641760201c565b81526020016040518060400160405280600481526020017f526f7373000000000000000000000000000000000000000000000000000000008152508152602001602060ff1681526020013373ffffffffffffffffffffffffffffffffffffffff1681525060046000808152602001908152602001600020600082015181600001556020820151816001019081620001409190620004a3565b5060408201518160020160006101000a81548160ff021916908360ff16021790555060608201518160020160016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550905050506200058a565b600081600001549050919050565b600080fd5b6000819050919050565b620001db81620001c6565b8114620001e757600080fd5b50565b600081519050620001fb81620001d0565b92915050565b6000602082840312156200021a5762000219620001c1565b5b60006200022a84828501620001ea565b91505092915050565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680620002b557607f821691505b602082108103620002cb57620002ca6200026d565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302620003357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82620002f6565b620003418683620002f6565b95508019841693508086168417925050509392505050565b6000819050919050565b6000620003846200037e6200037884620001c6565b62000359565b620001c6565b9050919050565b6000819050919050565b620003a08362000363565b620003b8620003af826200038b565b84845462000303565b825550505050565b600090565b620003cf620003c0565b620003dc81848462000395565b505050565b5b818110156200040457620003f8600082620003c5565b600181019050620003e2565b5050565b601f82111562000453576200041d81620002d1565b6200042884620002e6565b8101602085101562000438578190505b620004506200044785620002e6565b830182620003e1565b50505b505050565b600082821c905092915050565b6000620004786000198460080262000458565b1980831691505092915050565b600062000493838362000465565b9150826002028217905092915050565b620004ae8262000233565b67ffffffffffffffff811115620004ca57620004c96200023e565b5b620004d682546200029c565b620004e382828562000408565b600060209050601f8311600181146200051b576000841562000506578287015190505b62000512858262000485565b86555062000582565b601f1984166200052b86620002d1565b60005b8281101562000555578489015182556001820191506020850194506020810190506200052e565b8683101562000575578489015162000571601f89168262000465565b8355505b6001600288020188555050505b505050505050565b610c5b806200059a6000396000f3fe60806040526004361061007b5760003560e01c806378880f4a1161004e57806378880f4a1461011b5780638da5cb5b14610146578063b69ef8a814610171578063f46ca1be1461019c5761007b565b80631249c58b14610080578063246982c41461008a5780632b4ae7bd146100c75780635332a4d9146100f2575b600080fd5b6100886101c7565b005b34801561009657600080fd5b506100b160048036038101906100ac9190610513565b6101e3565b6040516100be919061069f565b60405180910390f35b3480156100d357600080fd5b506100dc61031f565b6040516100e991906106d0565b60405180910390f35b3480156100fe57600080fd5b506101196004803603810190610114919061084c565b610330565b005b34801561012757600080fd5b50610130610428565b60405161013d91906106d0565b60405180910390f35b34801561015257600080fd5b5061015b610434565b60405161016891906108c9565b60405180910390f35b34801561017d57600080fd5b50610186610458565b60405161019391906106d0565b60405180910390f35b3480156101a857600080fd5b506101b161045e565b6040516101be91906106d0565b60405180910390f35b6001600260008282546101da9190610913565b92505081905550565b6101eb610488565b600460008381526020019081526020016000206040518060800160405290816000820154815260200160018201805461022390610976565b80601f016020809104026020016040519081016040528092919081815260200182805461024f90610976565b801561029c5780601f106102715761010080835404028352916020019161029c565b820191906000526020600020905b81548152906001019060200180831161027f57829003601f168201915b505050505081526020016002820160009054906101000a900460ff1660ff1660ff1681526020016002820160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815250509050919050565b600061032b6003610464565b905090565b61033a6003610472565b604051806080016040528061034f6003610464565b81526020018381526020018260ff1681526020013373ffffffffffffffffffffffffffffffffffffffff168152506004600061038b6003610464565b81526020019081526020016000206000820151816000015560208201518160010190816103b89190610b53565b5060408201518160020160006101000a81548160ff021916908360ff16021790555060608201518160020160016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509050505050565b60038060000154905081565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60025481565b60015481565b600081600001549050919050565b6001816000016000828254019250508190555050565b60405180608001604052806000815260200160608152602001600060ff168152602001600073ffffffffffffffffffffffffffffffffffffffff1681525090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b6104f0816104dd565b81146104fb57600080fd5b50565b60008135905061050d816104e7565b92915050565b600060208284031215610529576105286104d3565b5b6000610537848285016104fe565b91505092915050565b610549816104dd565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561058957808201518184015260208101905061056e565b60008484015250505050565b6000601f19601f8301169050919050565b60006105b18261054f565b6105bb818561055a565b93506105cb81856020860161056b565b6105d481610595565b840191505092915050565b600060ff82169050919050565b6105f5816105df565b82525050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610626826105fb565b9050919050565b6106368161061b565b82525050565b60006080830160008301516106546000860182610540565b506020830151848203602086015261066c82826105a6565b915050604083015161068160408601826105ec565b506060830151610694606086018261062d565b508091505092915050565b600060208201905081810360008301526106b9818461063c565b905092915050565b6106ca816104dd565b82525050565b60006020820190506106e560008301846106c1565b92915050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61072d82610595565b810181811067ffffffffffffffff8211171561074c5761074b6106f5565b5b80604052505050565b600061075f6104c9565b905061076b8282610724565b919050565b600067ffffffffffffffff82111561078b5761078a6106f5565b5b61079482610595565b9050602081019050919050565b82818337600083830152505050565b60006107c36107be84610770565b610755565b9050828152602081018484840111156107df576107de6106f0565b5b6107ea8482856107a1565b509392505050565b600082601f830112610807576108066106eb565b5b81356108178482602086016107b0565b91505092915050565b610829816105df565b811461083457600080fd5b50565b60008135905061084681610820565b92915050565b60008060408385031215610863576108626104d3565b5b600083013567ffffffffffffffff811115610881576108806104d8565b5b61088d858286016107f2565b925050602061089e85828601610837565b9150509250929050565b60006108b3826105fb565b9050919050565b6108c3816108a8565b82525050565b60006020820190506108de60008301846108ba565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061091e826104dd565b9150610929836104dd565b9250828201905080821115610941576109406108e4565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061098e57607f821691505b6020821081036109a1576109a0610947565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302610a097fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826109cc565b610a1386836109cc565b95508019841693508086168417925050509392505050565b6000819050919050565b6000610a50610a4b610a46846104dd565b610a2b565b6104dd565b9050919050565b6000819050919050565b610a6a83610a35565b610a7e610a7682610a57565b8484546109d9565b825550505050565b600090565b610a93610a86565b610a9e818484610a61565b505050565b5b81811015610ac257610ab7600082610a8b565b600181019050610aa4565b5050565b601f821115610b0757610ad8816109a7565b610ae1846109bc565b81016020851015610af0578190505b610b04610afc856109bc565b830182610aa3565b50505b505050565b600082821c905092915050565b6000610b2a60001984600802610b0c565b1980831691505092915050565b6000610b438383610b19565b9150826002028217905092915050565b610b5c8261054f565b67ffffffffffffffff811115610b7557610b746106f5565b5b610b7f8254610976565b610b8a828285610ac6565b600060209050601f831160018114610bbd5760008415610bab578287015190505b610bb58582610b37565b865550610c1d565b601f198416610bcb866109a7565b60005b82811015610bf357848901518255600182019150602085019450602081019050610bce565b86831015610c105784890151610c0c601f891682610b19565b8355505b6001600288020188555050505b50505050505056fea2646970667358221220e88e6022e178cd24faf4607a0b7e5a2fb3297806f36c50b4b44673401b12d56264736f6c63430008120033",
  "deployedBytecode": "0x60806040526004361061007b5760003560e01c806378880f4a1161004e57806378880f4a1461011b5780638da5cb5b14610146578063b69ef8a814610171578063f46ca1be1461019c5761007b565b80631249c58b14610080578063246982c41461008a5780632b4ae7bd146100c75780635332a4d9146100f2575b600080fd5b6100886101c7565b005b34801561009657600080fd5b506100b160048036038101906100ac9190610513565b6101e3565b6040516100be919061069f565b60405180910390f35b3480156100d357600080fd5b506100dc61031f565b6040516100e991906106d0565b60405180910390f35b3480156100fe57600080fd5b506101196004803603810190610114919061084c565b610330565b005b34801561012757600080fd5b50610130610428565b60405161013d91906106d0565b60405180910390f35b34801561015257600080fd5b5061015b610434565b60405161016891906108c9565b60405180910390f35b34801561017d57600080fd5b50610186610458565b60405161019391906106d0565b60405180910390f35b3480156101a857600080fd5b506101b161045e565b6040516101be91906106d0565b60405180910390f35b6001600260008282546101da9190610913565b92505081905550565b6101eb610488565b600460008381526020019081526020016000206040518060800160405290816000820154815260200160018201805461022390610976565b80601f016020809104026020016040519081016040528092919081815260200182805461024f90610976565b801561029c5780601f106102715761010080835404028352916020019161029c565b820191906000526020600020905b81548152906001019060200180831161027f57829003601f168201915b505050505081526020016002820160009054906101000a900460ff1660ff1660ff1681526020016002820160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815250509050919050565b600061032b6003610464565b905090565b61033a6003610472565b604051806080016040528061034f6003610464565b81526020018381526020018260ff1681526020013373ffffffffffffffffffffffffffffffffffffffff168152506004600061038b6003610464565b81526020019081526020016000206000820151816000015560208201518160010190816103b89190610b53565b5060408201518160020160006101000a81548160ff021916908360ff16021790555060608201518160020160016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509050505050565b60038060000154905081565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60025481565b60015481565b600081600001549050919050565b6001816000016000828254019250508190555050565b60405180608001604052806000815260200160608152602001600060ff168152602001600073ffffffffffffffffffffffffffffffffffffffff1681525090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b6104f0816104dd565b81146104fb57600080fd5b50565b60008135905061050d816104e7565b92915050565b600060208284031215610529576105286104d3565b5b6000610537848285016104fe565b91505092915050565b610549816104dd565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561058957808201518184015260208101905061056e565b60008484015250505050565b6000601f19601f8301169050919050565b60006105b18261054f565b6105bb818561055a565b93506105cb81856020860161056b565b6105d481610595565b840191505092915050565b600060ff82169050919050565b6105f5816105df565b82525050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610626826105fb565b9050919050565b6106368161061b565b82525050565b60006080830160008301516106546000860182610540565b506020830151848203602086015261066c82826105a6565b915050604083015161068160408601826105ec565b506060830151610694606086018261062d565b508091505092915050565b600060208201905081810360008301526106b9818461063c565b905092915050565b6106ca816104dd565b82525050565b60006020820190506106e560008301846106c1565b92915050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61072d82610595565b810181811067ffffffffffffffff8211171561074c5761074b6106f5565b5b80604052505050565b600061075f6104c9565b905061076b8282610724565b919050565b600067ffffffffffffffff82111561078b5761078a6106f5565b5b61079482610595565b9050602081019050919050565b82818337600083830152505050565b60006107c36107be84610770565b610755565b9050828152602081018484840111156107df576107de6106f0565b5b6107ea8482856107a1565b509392505050565b600082601f830112610807576108066106eb565b5b81356108178482602086016107b0565b91505092915050565b610829816105df565b811461083457600080fd5b50565b60008135905061084681610820565b92915050565b60008060408385031215610863576108626104d3565b5b600083013567ffffffffffffffff811115610881576108806104d8565b5b61088d858286016107f2565b925050602061089e85828601610837565b9150509250929050565b60006108b3826105fb565b9050919050565b6108c3816108a8565b82525050565b60006020820190506108de60008301846108ba565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061091e826104dd565b9150610929836104dd565b9250828201905080821115610941576109406108e4565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061098e57607f821691505b6020821081036109a1576109a0610947565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302610a097fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826109cc565b610a1386836109cc565b95508019841693508086168417925050509392505050565b6000819050919050565b6000610a50610a4b610a46846104dd565b610a2b565b6104dd565b9050919050565b6000819050919050565b610a6a83610a35565b610a7e610a7682610a57565b8484546109d9565b825550505050565b600090565b610a93610a86565b610a9e818484610a61565b505050565b5b81811015610ac257610ab7600082610a8b565b600181019050610aa4565b5050565b601f821115610b0757610ad8816109a7565b610ae1846109bc565b81016020851015610af0578190505b610b04610afc856109bc565b830182610aa3565b50505b505050565b600082821c905092915050565b6000610b2a60001984600802610b0c565b1980831691505092915050565b6000610b438383610b19565b9150826002028217905092915050565b610b5c8261054f565b67ffffffffffffffff811115610b7557610b746106f5565b5b610b7f8254610976565b610b8a828285610ac6565b600060209050601f831160018114610bbd5760008415610bab578287015190505b610bb58582610b37565b865550610c1d565b601f198416610bcb866109a7565b60005b82811015610bf357848901518255600182019150602085019450602081019050610bce565b86831015610c105784890151610c0c601f891682610b19565b8355505b6001600288020188555050505b50505050505056fea2646970667358221220e88e6022e178cd24faf4607a0b7e5a2fb3297806f36c50b4b44673401b12d56264736f6c63430008120033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 82,
        "contract": "contracts/test.sol:test",
        "label": "owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 84,
        "contract": "contracts/test.sol:test",
        "label": "i_initialSupply",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 86,
        "contract": "contracts/test.sol:test",
        "label": "balance",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 89,
        "contract": "contracts/test.sol:test",
        "label": "population",
        "offset": 0,
        "slot": "3",
        "type": "t_struct(Counter)5_storage"
      },
      {
        "astId": 94,
        "contract": "contracts/test.sol:test",
        "label": "people",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_struct(Person)103_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_mapping(t_uint256,t_struct(Person)103_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct test.Person)",
        "numberOfBytes": "32",
        "value": "t_struct(Person)103_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Counter)5_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 4,
            "contract": "contracts/test.sol:test",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Person)103_storage": {
        "encoding": "inplace",
        "label": "struct test.Person",
        "members": [
          {
            "astId": 96,
            "contract": "contracts/test.sol:test",
            "label": "_id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 98,
            "contract": "contracts/test.sol:test",
            "label": "_name",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 100,
            "contract": "contracts/test.sol:test",
            "label": "_age",
            "offset": 0,
            "slot": "2",
            "type": "t_uint8"
          },
          {
            "astId": 102,
            "contract": "contracts/test.sol:test",
            "label": "_wallet",
            "offset": 1,
            "slot": "2",
            "type": "t_address_payable"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}